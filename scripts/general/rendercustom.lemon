function void BlueSpheresTimer.renderTimer(s32 px, s32 py, u16 renderQueue)
{
	// Ignore for Rolling Demo and Blue Sphere game
	if (global.game_mode == 0x08 || bluespheres.minigame_mode)
		return
	
	// Ignore for Main Special stages if Time bonus or Achievements disabled
	if ((SETTING_BS_TIME_BONUSES_ON_SPECIALS == 0x00 || SETTING_BS_ACHIEVEMENTS_ENABLE == 0x00) && !bluespheres.timeattack.active && !(global.game_mode >= 0x85 && global.game_mode <= 0xff))
	{
		if (SETTING_BS_ACHIEVEMENTS_ENABLE)
		{
			// If achievements are enabled, but the timer is disabled, then you still can get achievements
			BlueSpheresTimer.Achievements.update()
		}
		return
	}
	
	// Checking the activity of achievements
	BlueSpheresTimer.Achievements.update()
	
	// Blink when the time exceeds 59:00:00 / 4:30:00
	bool timeUnlimited = BlueSpheresTimer.timeUnlimited()
	if (bluespheres.timer.currentTime >= (timeUnlimited ? 590000 : 43000) && level.framecounter.low & 0x10)
		return
	
	// Get from bluespheres.timer.currentTime minutes, seconds, and centiseconds
	s32 minutes = bluespheres.timer.currentTime / 10000
	s32 seconds = (bluespheres.timer.currentTime - (minutes * 10000)) / 100
	s32 centiseconds = (bluespheres.timer.currentTime - (minutes * 10000)) - (seconds * 100)
	
	// Render timer is a separate function so that modders can modify its appearance in their mods
	BlueSpheresTimer.renderTimer(minutes, seconds, centiseconds, px, py, renderQueue)
}

function void BlueSpheresTimer.renderTimer(s32 minutes, s32 seconds, s32 centiseconds, s32 px, s32 py, u16 renderQueue)
{
	py -= 0x06
	if (Game.getSetting(SETTING_EXTENDED_HUD) || bluespheres.timeattack.active) // || Use extended HUD in Time Attack mode
	{
		px -= 0x40 / 0x02
		HUD.drawNumber("hud_digit_%d", minutes / 0x0a, px, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", minutes % 0x0a, px + 0x08, py, renderQueue)
		HUD.drawSprite("hud_char_minutes", px + 0x10, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", seconds / 0x0a, px + 0x18, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", seconds % 0x0a, px + 0x20, py, renderQueue)
		HUD.drawSprite("hud_char_seconds", px + 0x28, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", centiseconds / 0x0a, px + 0x30, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", centiseconds % 0x0a, px + 0x38, py, renderQueue)
	}
	else
	{
		px -= 0x28 / 0x02
		HUD.drawNumber("hud_digit_%d", minutes / 0x0a, px, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", minutes % 0x0a, px + 0x08, py, renderQueue)
		HUD.drawSprite("hud_char_colon", px + 0x10, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", seconds / 0x0a, px + 0x18, py, renderQueue)
		HUD.drawNumber("hud_digit_%d", seconds % 0x0a, px + 0x20, py, renderQueue)
	}
}