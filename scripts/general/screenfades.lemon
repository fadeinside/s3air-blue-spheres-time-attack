//@ Function taken from sonic3air_dev/scripts/general/screenfades.lemon
//# address-hook(0x003d30) end(0x003d4e)
function void FadeScreenToWhiteBlocking()
{
	palette_fade.range = 0x003f
	D4.u16 = 0x15
	while (D4.s16 >= 0x00)
	{
		global.frame_state = 0x12
		waitForNextFrame()
		
	#if GAMEAPP
		Renderer.enableDefaultPlane(0x03, false)
	#endif
		
		FadePaletteToWhite()
		LoadRequiredSpritePatterns()
		--D4.s16
	}
}

//? Modified FadeInFromWhite(), for the correct palette fade of VDP spheres in the menu.
//@ Original function taken from sonic3air_dev/scripts/general/screenfades.lemon
function void BlueSpheresTimer.FadeInFromWhite()
{
	if (bluespheres.timeattack.active || !SETTING_BS_STAGE_PREVIEW_ENABLE)
	{
		// Call the original function
		FadeInFromWhite()
		return
	}
	
	u8 numPalettes = (level.water_present != 0x00) ? 0x02 : 0x01
	for (u8 k = 0x00; k < numPalettes; ++k)
	{
		A0 = ((k == 0x00) ? 0xfffffc00 : 0xfffff080) + palette_fade.offset
		A1 = ((k == 0x00) ? 0xfffffc80 : 0xfffff000) + palette_fade.offset
		for (u8 i = 0x00; i <= palette_fade.count; ++i)
		{
			FadeInColor()
		}
	}

#if STANDALONE
	if (EXTENDED_CHARACTER_PALETTES)
	{
		for (u8 k = 0x00; k < numPalettes; ++k)
		{
			A0 = ((k == 0x00) ? 0x802000 : 0x802300)
			A1 = ((k == 0x00) ? 0x802180 : 0x802480)
			for (u16 i = 0x00; i < 0xc0; ++i)
			{
				FadeInColor()
			}
		}
	}

	globalComponentTintColorB = min(globalComponentTintColorB + 0x25, 0xff)
	globalComponentTintColorG = min(globalComponentTintColorG + 0x25, 0xff)
	globalComponentTintColorR = min(globalComponentTintColorR + 0x25, 0xff)
	globalComponentAddedColorR = max(globalComponentAddedColorR - 0x25, 0x00)
	globalComponentAddedColorG = max(globalComponentAddedColorG - 0x25, 0x00)
	globalComponentAddedColorB = max(globalComponentAddedColorB - 0x25, 0x00)
#endif
}