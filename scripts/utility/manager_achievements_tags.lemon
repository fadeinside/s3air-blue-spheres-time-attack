//? Returns the tags of the specified Achievement ID.
function string BlueSpheresTimer.Achievements.getTags(u32 achievementId)
{
	// Tag ID's:
	// - 0 - None
	// - 1 - Unknown tag
	// - 2 - Common tag
	// - 3 - Hard tag
	// - 4 - Special tag
	// - 5 - Unique tag
	// - 6 - Rare tag
	// - 7 - Super rare tag
	// - 8 - Challenge tag
	// - 9 - Easy tag
	
	if (achievementId == ACHIEVEMENT_BS_GET_100_BLUE_SPHERES)
		return "9" // Tag: Easy
	else if (achievementId == ACHIEVEMENT_BS_GET_300_BLUE_SPHERES)
		return "9" // Tag: Easy
	else if (achievementId == ACHIEVEMENT_BS_GET_600_BLUE_SPHERES)
		return "2" // Tag: Common
	else if (achievementId == ACHIEVEMENT_BS_GET_1200_BLUE_SPHERES)
		return "26" // Tag: Common, Rare
	else if (achievementId == ACHIEVEMENT_BS_GET_2048_BLUE_SPHERES)
		return "26" // Tag: Common, Rare
	
	else if (achievementId == ACHIEVEMENT_BS_RAN_INTO_RED_SPHERE)
		return "26" // Tag: Common, Rare
	else if (achievementId == ACHIEVEMENT_BS_RAN_INTO_RED_SPHERE2)
		return "9" // Tag: Easy
	
	else if (achievementId >= ACHIEVEMENT_BS_DA_GARDEN_EDITION && achievementId <= ACHIEVEMENT_BS_CONVERT_1200_GREEN_SPHERES)
	{
		if (achievementId == ACHIEVEMENT_BS_DA_GARDEN_EDITION)
			return "49" // Tag: Special, Easy
		else if (achievementId == ACHIEVEMENT_BS_CONVERT_720_GREEN_SPHERES || achievementId == ACHIEVEMENT_BS_CONVERT_1200_GREEN_SPHERES)
			return "46" // Tag: Special, Rare
		else
			return "4" // Tag: Special
	}
	
	else if (achievementId == ACHIEVEMENT_BS_BOUNCE_OFF_15_TIMES)
		return "9" // Tag: Easy
	else if (achievementId == ACHIEVEMENT_BS_BOUNCE_OFF_55_TIMES)
		return "26" // Tag: Common, Rare
	else if (achievementId == ACHIEVEMENT_BS_BOUNCE_OFF_150_TIMES)
		return "27" // Tag: Common, Super rare
	
	else if (achievementId == ACHIEVEMENT_BS_USE_YELLOW_SPHERE_15_TIMES)
		return "2" // Tag: Common
	else if (achievementId == ACHIEVEMENT_BS_USE_YELLOW_SPHERE_45_TIMES)
		return "26" // Tag: Common, Rare
	else if (achievementId == ACHIEVEMENT_BS_USE_YELLOW_SPHERE_110_TIMES)
		return "36" // Tag: Hard, Rare
	
	else if (achievementId == ACHIEVEMENT_BS_YOU_ARE_TOO_SLOW)
		return "46" // Tag: Special, Rare
	
	else if (achievementId == ACHIEVEMENT_BS_ACTIVATED_SUPER_EMERALDS)
		return "8" // Tag: Challenge
	else if (achievementId == ACHIEVEMENT_BS_ALL_CHAOS_EMERALDS)
		return "3" // Tag: Hard
	
	else if (achievementId == ACHIEVEMENT_BS_JUMP_50_TIMES)
		return "9" // Tag: Easy
	else if (achievementId == ACHIEVEMENT_BS_JUMP_200_TIMES)
		return "26" // Tag: Common, Rare
	else if (achievementId == ACHIEVEMENT_BS_JUMP_500_TIMES)
		return "37" // Tag: Hard, Super rare
	else if (achievementId == ACHIEVEMENT_BS_JUMP_1000_TIMES)
		return "8" // Tag: Challenge
	
	else if (achievementId == ACHIEVEMENT_BS_COLLECT_400_RINGS)
		return "9" // Tag: Easy
	else if (achievementId == ACHIEVEMENT_BS_COLLECT_800_RINGS)
		return "2" // Tag: Common
	else if (achievementId == ACHIEVEMENT_BS_COLLECT_1200_RINGS)
		return "26" // Tag: Common, Rare
	else if (achievementId == ACHIEVEMENT_BS_COLLECT_2000_RINGS)
		return "37" // Tag: Hard, Super rare
	else if (achievementId == ACHIEVEMENT_BS_COLLECT_4000_RINGS)
		return "8" // Tag: Challenge
	
	else if (achievementId == ACHIEVEMENT_BS_GET_5_CONTINUES)
		return "9" // Tag: Easy
	else if (achievementId == ACHIEVEMENT_BS_GET_15_CONTINUES)
		return "2" // Tag: Common
	else if (achievementId == ACHIEVEMENT_BS_GET_30_CONTINUES)
		return "37" // Tag: Hard, Super rare
	else if (achievementId == ACHIEVEMENT_BS_GET_50_CONTINUES)
		return "8" // Tag: Challenge
	
	else if (achievementId == ACHIEVEMENT_BS_JUMP_OVER_REDSPHERE_10)
		return "2" // Tag: Common
	else if (achievementId == ACHIEVEMENT_BS_JUMP_OVER_REDSPHERE_50)
		return "3" // Tag: Hard
	else if (achievementId == ACHIEVEMENT_BS_JUMP_OVER_REDSPHERE_100)
		return "36" // Tag: Hard, Rare
	else if (achievementId == ACHIEVEMENT_BS_JUMP_OVER_REDSPHERE_220)
		return "37" // Tag: Hard, Super rare
	
	else if (achievementId == ACHIEVEMENT_BS_PLUS_COMPLETE_MARATHON)
		return "458" // Tag: Special, Unique, Challenge
		
	else if (achievementId == ACHIEVEMENT_BS_FIND_A_SECRET)
		return "57" // Tag: Unique, Super rare
	
	// Default return value
	return "0" // Tag: None
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// (Original) Tags with alignment				//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.Achievements.Tags.drawTags() function without configurable transparency.
function void BlueSpheresTimer.Achievements.Tags.drawTags(s32 px, s32 py, u16 renderQueue, u8 align, string tags)
{
	BlueSpheresTimer.Achievements.Tags.drawTags(px, py, renderQueue, align, tags, 255)
}

//? The full tags rendering code with text alignment.
function void BlueSpheresTimer.Achievements.Tags.drawTags(s32 px, s32 py, u16 renderQueue, u8 align, string tags, u8 alpha)
{
	s32 tag_space
	for (s32 A = 0x00; A < strlen(tags); ++A)
	{
		s32 tag = getchar(tags, A)
		
		string key = BlueSpheresTimer.Achievements.Tags.getSprite(tag)
		if (Renderer.hasCustomSprite(key))
			tag_space += BlueSpheresTimer.Achievements.Tags.getSpacing(tag)
	}
	
	// Alignment:
	// - 0x00 - From Right
	// - 0x01 - From Center
	// - 0x02 - From Left
	
	s32 left
	if (align == 0x00)
		left = tag_space
	else if (align == 0x01)
		left = tag_space / 0x02
	else if (align == 0x02)
		left = 0x00
	
	BlueSpheresTimer.Achievements.Tags.basic(px - left, py, renderQueue, tags, alpha)
}

// - - - - - - - - - - - - - - - - - - - //
// Basic								   //
// - - - - - - - - - - - - - - - - - - - //

//? The basic code for tags rendering.
function void BlueSpheresTimer.Achievements.Tags.basic(s32 px, s32 py, u16 renderQueue, string tags, u8 alpha)
{
	s32 tag_space
	for (s32 A = 0x00; A < strlen(tags); ++A)
	{
		s32 tag = getchar(tags, A)
		
		BlueSpheresTimer.Achievements.Tags.renderTag(px, py, renderQueue, tag, tag_space, alpha)
		tag_space += BlueSpheresTimer.Achievements.Tags.getSpacing(tag)
	}
}

//? Single tag rendering function. Some optimizations are also used here to fasted rendering.
function void BlueSpheresTimer.Achievements.Tags.renderTag(s32 px, s32 py, u16 renderQueue, string tag, s32 tag_space, u8 alpha)
{
	if ((px + tag_space) >= getScreenWidth() || (px + tag_space) <= -0x12)
		return
	if (py >= getScreenHeight() || py <= 0x00)
		return
	
	string key = BlueSpheresTimer.Achievements.Tags.getSprite(tag)
	if (Renderer.hasCustomSprite(key))
		Renderer.drawCustomSprite(key, px + tag_space, py, 0x00, 0x40, renderQueue, 0x00, alpha)
}

//? Returns the tag sprite.
function string BlueSpheresTimer.Achievements.Tags.getSprite(string tag)
{
	if (tag == getChar("1"))
		return "icon_tag_unknown"
	else if (tag == getChar("2"))
		return "icon_tag_common"
	else if (tag == getChar("3"))
		return "icon_tag_hard"
	else if (tag == getChar("4"))
		return "icon_tag_special"
	else if (tag == getChar("5"))
		return "icon_tag_unique"
	else if (tag == getChar("6"))
		return "icon_tag_rare"
	else if (tag == getChar("7"))
		return "icon_tag_superrare"
	else if (tag == getChar("8"))
		return "icon_tag_challenge"
	else if (tag == getChar("9"))
		return "icon_tag_easy"
	
	// Default return value
	return "icon_tag_none"
}

//? Returns the width of the tag sprite.
function u8 BlueSpheresTimer.Achievements.Tags.getSpacing(string tag)
{
	// + 0x01 is a small space
	if (tag == getChar("1"))
		return 41 + 0x01
	else if (tag == getChar("2"))
		return 37 + 0x01
	else if (tag == getChar("3") || tag == getChar("6"))
		return 24 + 0x01
	else if (tag == getChar("4"))
		return 34 + 0x01
	else if (tag == getChar("5"))
		return 32 + 0x01
	else if (tag == getChar("7"))
		return 52 + 0x01
	else if (tag == getChar("8"))
		return 44 + 0x01
	else if (tag == getChar("9"))
		return 25 + 0x01
	
	// Default return value
	return 0x00
}