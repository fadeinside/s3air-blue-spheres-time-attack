//? Update the number of medals received.
function void BlueSpheresTimer.Medals.update()
{
	// Just show a toast if a medal has been received
	BlueSpheresTimer.Medals.toast()
	
	// Update saved medal data following live-time data (The number of medals will decrease if you erase achievements, for example, so this needs to be updated)
	if (BlueSpheresTimer.Data.getValue(bluespheres.medals.lastSaved) > BlueSpheresTimer.Medals.received())
		BlueSpheresTimer.Data.setValue(bluespheres.medals.lastSaved, BlueSpheresTimer.Medals.received())
}

//? Returns the status (true - Unlocked, false - Locked) of the specified medal.
function bool BlueSpheresTimer.Medals.isUnlocked(u8 category, u8 medal)
{
	if (category == 0x00)
	{
		// Complete 5 achievements
		if (medal == 0x01)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 0x05)
		// Complete 10 achievements
		if (medal == 0x02)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 10)
		// Complete 15 achievements
		if (medal == 0x03)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 15)
		// Complete 20 achievements
		if (medal == 0x04)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 20)
		// Complete 25 achievements
		if (medal == 0x05)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 25)
		// Complete 30 achievements
		if (medal == 0x06)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 30)
		// Complete 35 achievements
		if (medal == 0x07)
			return (BlueSpheresTimer.Achievements.getValueBySort(0x01) >= 35)
		// Complete all achievements (just all achievements)
		if (medal == 0x08)
			return ((BlueSpheresTimer.Achievements.getValueBySort(0x01) - 0x01) == bluespheres.achievements.total)
		// Complete all achievements related to the get blue spheres
		if (medal == 0x09)
			return (BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GET_100_BLUE_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GET_300_BLUE_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GET_600_BLUE_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GET_1200_BLUE_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GET_2048_BLUE_SPHERES))
		// Complete all the rings-related achievements
		if (medal == 0x0a)
			return (BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_COLLECT_400_RINGS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_COLLECT_800_RINGS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_COLLECT_1200_RINGS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_COLLECT_2000_RINGS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_COLLECT_4000_RINGS))
		// Complete all the jump-related achievements
		if (medal == 0x0b)
			return (BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_USE_YELLOW_SPHERE_15_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_USE_YELLOW_SPHERE_45_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_USE_YELLOW_SPHERE_110_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_JUMP_50_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_JUMP_200_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_JUMP_500_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_JUMP_1000_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_BOUNCE_OFF_15_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_BOUNCE_OFF_55_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_BOUNCE_OFF_150_TIMES))
		// Complete the emeralds-related achievements
		if (medal == 0x0c)
			return BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_ALL_CHAOS_EMERALDS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_ACTIVATED_SUPER_EMERALDS)
		// Complete all the DAGE-related achievements
		if (medal == 0x0d)
			return (BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_DA_GARDEN_EDITION) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GREEN_SPHERE) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_50_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_150_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_400_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_720_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_1200_GREEN_SPHERES))
		// Complete all achievements that have the Challenge tag
		if (medal == 0x0e)
			return (BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_ACTIVATED_SUPER_EMERALDS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_JUMP_1000_TIMES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_COLLECT_4000_RINGS) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GET_50_CONTINUES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_PLUS_COMPLETE_MARATHON))
		// Complete all achievements that require third-party mods
		if (medal == 0x0f)
			return (BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_DA_GARDEN_EDITION) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_GREEN_SPHERE) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_50_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_150_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_400_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_720_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_CONVERT_1200_GREEN_SPHERES) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_YOU_ARE_TOO_SLOW) && BlueSpheresTimer.Achievements.isComplete(ACHIEVEMENT_BS_PLUS_COMPLETE_MARATHON))
	}
	
	// Default return value
	return false
}

//? Returns the medal sprite.
function string BlueSpheresTimer.Medals.getSprite(u8 category, u8 medal)
{
	if (category == 0x00)
	{
		if (medal == 0x01)
			return "icon_medal_achievements_5"
		else if (medal == 0x02)
			return "icon_medal_achievements_10"
		else if (medal == 0x03)
			return "icon_medal_achievements_15"
		else if (medal == 0x04)
			return "icon_medal_achievements_20"
		else if (medal == 0x05)
			return "icon_medal_achievements_25"
		else if (medal == 0x06)
			return "icon_medal_achievements_30"
		else if (medal == 0x07)
			return "icon_medal_achievements_35"
		else if (medal == 0x08)
			return "icon_medal_longplay"
		else if (medal == 0x09)
			return "icon_medal_blue_sphere"
		else if (medal == 0x0a)
			return "icon_medal_oh_shiny"
		else if (medal == 0x0b)
			return "icon_medal_like_jumping"
		else if (medal == 0x0c)
			return "icon_medal_my_power"
		else if (medal == 0x0d)
			return "icon_medal_DAGE"
		else if (medal == 0x0e)
			return "icon_medal_challenger"
		else if (medal == 0x0f)
			return "icon_medal_featured"
	}
	
	// Failsave value
	return "icon_medal_lock"
}

//? Show a toast when a medal is received.
function void BlueSpheresTimer.Medals.toast()
{
	// Check if need to show a toast
	if (BlueSpheresTimer.Data.getValue(bluespheres.medals.lastSaved) < BlueSpheresTimer.Medals.received())
	{
		// Show toast if it doesn't show anything or shows a medal toast
		if (bluespheres.toast.show == "" || bluespheres.toast.show == STRING_MEDALS_TOAST_RECEIVED_1)
		{
			bluespheres.toast.show = STRING_MEDALS_TOAST_RECEIVED_1
			
			string medalTitle = (bluespheres.toast.timeout >= (SETTING_BS_TOAST_DURATION / 0x02)) ? STRING_MEDALS_TOAST_RECEIVED_2 : STRING_MEDALS_TOAST_RECEIVED_1
			BlueSpheresTimer.Menu.toast.setup("icon_tooltip_medal", medalTitle)
		}
	}
	
	// If the medal does not require a toast and it is not equal to the current one shown, then ignore
	if (BlueSpheresTimer.Data.getValue(bluespheres.medals.lastSaved) == BlueSpheresTimer.Medals.received() && bluespheres.toast.show != STRING_MEDALS_TOAST_RECEIVED_1)
		return
	
	// If the medal is equal to the current one shown and the state of the toast is equal to 0x04
	if (bluespheres.toast.show == STRING_MEDALS_TOAST_RECEIVED_1 && bluespheres.toast.state == 0x04)
	{
		BlueSpheresTimer.Data.setValue(bluespheres.medals.lastSaved, BlueSpheresTimer.Medals.received())
		
		bluespheres.toast.show = ""
		bluespheres.toast.state = 0x00
	}
}

//? Returns the number of medals that are received.
function u8 BlueSpheresTimer.Medals.received()
{
	u8 medals_received
	
	// Number of categories (0x00 ... 0x00)
	for (u8 A = 0x00; A <= 0x00; ++A)
	{
		// Total number of medals
		u8 maxMedals = (A == 0x00) ? 0x0f : 0x00
		for (u8 B = 0x01; B <= maxMedals; ++B)
		{
			// Add +1 to variable if Achievement complete
			if (BlueSpheresTimer.Medals.isUnlocked(A, B))
			{
				medals_received += 0x01
			}
		}
	}
	
	// Return the value
	return medals_received
}