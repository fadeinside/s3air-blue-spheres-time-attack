// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// Text with alignment and bumper 			//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.TextManager.drawTextMenuItem() function without configurable transparency.
function void BlueSpheresTimer.TextManager.drawTextMenuItem(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, u8 selected, u8 target)
{
	BlueSpheresTimer.TextManager.drawTextMenuItem(px, py, renderQueue, align, text, font, 255, selected, target)
}

function void BlueSpheresTimer.TextManager.drawTextMenuItem(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, u8 alpha, u8 selected, u8 target)
{
	s32 text_width = BlueSpheresTimer.TextManager.getTextWidth(text, font)
	s32 left = (align == 0x00) ? text_width : ((align == 0x01) ? text_width / 0x02 : 0x00) 
	
	// Alignment:
	// - 0x00 - From Right
	// - 0x01 - From Center
	// - 0x02 - From Left
	
	if (selected == target)
	{
		s32 left2 = (align == 0x00) ? 0x00 : ((align == 0x01) ? text_width / 0x02 : text_width)
		string key = BlueSpheresTimer.TextManager.getCharacterBumper()
		
		if (Renderer.hasCustomSprite(key))
		{
			Renderer.drawCustomSprite(key, px - (left + 0x0e) , py, 0x00, 0x00, renderQueue)
			Renderer.drawCustomSprite(key, px + (left2 + 0x0d), py, 0x00, SPRITE_FLAG_FLIP_X, renderQueue)
		}
	} 
	
	BlueSpheresTimer.TextManager.basic(px - left, py, renderQueue, text, font, alpha)
}

function string BlueSpheresTimer.TextManager.getCharacterBumper()
{
	string key
	
	if (bluespheres.timeattack.characterselected == CHARACTER_SONIC)
		key = stringformat("bump_sonic_0x%02x", bluespheres.bumperselect.sprite) 
	else if (bluespheres.timeattack.characterselected == CHARACTER_TAILS)
		key = stringformat("bump_tails_0x%02x", bluespheres.bumperselect.sprite) 
	else if (bluespheres.timeattack.characterselected == CHARACTER_KNUCKLES)
		key = stringformat("bump_knuckles_0x%02x", bluespheres.bumperselect.sprite) 
	else if (bluespheres.timeattack.characterselected == 0x03)
	{
		key = stringformat("bump_slot%d_0x%02x", bluespheres.timeattack.xtracharselected, bluespheres.bumperselect.sprite)
		if !(Renderer.hasCustomSprite(key))
			key = stringformat("bump_sonic_0x%02x", bluespheres.bumperselect.sprite)
	}
	
	return key
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// Small text with alignment and bg			//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.TextManager.drawSmallTexWithBG() function without configurable transparency.
function void BlueSpheresTimer.TextManager.drawSmallTexWithBG(s32 px, s32 py, u16 renderQueue, u8 align, string color, string icon, string text)
{
	BlueSpheresTimer.TextManager.drawSmallTexWithBG(px, py, renderQueue, align, color, icon, text, 255)
}

function void BlueSpheresTimer.TextManager.drawSmallTexWithBG(s32 px, s32 py, u16 renderQueue, u8 align, string color, string icon, string text, u32 alpha)
{
	s32 icon_offset = ((icon != "") ? (0x09 + 0x03) : 0x00) // Icon width + small space
	s32 text_width = icon_offset + BlueSpheresTimer.TextManager.getTextWidth(text, 0x03)
	
	// Alignment:
	// - 0x00 - From Right
	// - 0x01 - From Center
	// - 0x02 - From Left
	
	s32 left = (align == 0x00) ? text_width : ((align == 0x01) ? text_width / 0x02 : 0x00)
	px -= left
	
	// Icon and text
	if (Renderer.hasCustomSprite(icon) && icon != "")
		Renderer.drawCustomSprite(icon, px, py - 0x01, 0x00, 0x40, renderQueue)
	BlueSpheresTimer.TextManager.drawText(px + icon_offset, py, renderQueue, 0x02, text, 0x03, alpha)
	
	// Tooltip background
	if (color == "gray")
		alpha /= 0x02
	Renderer.drawCustomSprite(stringformat("icon_tooltip_%s_start", color), px, py, 0x00, 0x40, renderQueue, 0x00, alpha)
	Renderer.drawCustomSpriteWithTransform(stringformat("icon_tooltip_%s_front", color), px, py, 0x00, 0x00, renderQueue, alpha * 0x1000000 + 0xffffff, 0x10000 * text_width, 0x00, 0x00, 0x10000)
	px += text_width
	Renderer.drawCustomSprite(stringformat("icon_tooltip_%s_end", color), px, py, 0x00, 0x40, renderQueue, 0x00, alpha)
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// Text with alignment and line  			 	//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.TextManager.drawTextWithLine() function without configurable transparency.
function void BlueSpheresTimer.TextManager.drawTextWithLine(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font)
{
	BlueSpheresTimer.TextManager.drawTextWithLine(px, py, renderQueue, align, text, font, 255)
}

function void BlueSpheresTimer.TextManager.drawTextWithLine(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, u8 alpha)
{
	s32 text_width = BlueSpheresTimer.TextManager.getTextWidth(text, font)
	s32 left = (align == 0x00) ? text_width : ((align == 0x01) ? text_width / 0x02 : 0x00)
	
	// Alignment:
	// - 0x00 - From Right
	// - 0x01 - From Center
	// - 0x02 - From Left
	
	BlueSpheresTimer.TextManager.basic(px - left, py, renderQueue, text, font, alpha)
	
	s32 left2 // Left line
	s32 left3 // Right line
	s32 offset = (text == "") ? 0x04 : 12
	
	if (align == 0x00)
		left2 = ((px - getScreenExtend()) - text_width) - 0x08
	else if (align == 0x01)
	{
		left2 = ((px - getScreenExtend()) - (text_width / 0x02)) - 0x08
		left3 = (((getScreenWidth() - getScreenExtend()) - px) - (text_width / 0x02)) - 0x08
	}
	else if (align == 0x02)
		left2 = (px - getScreenExtend()) - 0x08
	else if (align == 0x03)
		left3 = (((getScreenWidth() - getScreenExtend()) - px) - text_width) - 0x08
	
	if !(align == 0x03)
		Renderer.drawCustomSpriteWithTransform("icon_whitedot", getScreenExtend() + 12, py, 0x00, 0x40, renderQueue, 0x80ffffff, 0x10000 * (left2 - offset), 0x00, 0x00, 0x10000)
	
	if (align == 0x01 || align == 0x03)
		Renderer.drawCustomSpriteWithTransform("icon_whitedot", (getScreenWidth() - getScreenExtend()) - 12, py, 0x00, SPRITE_FLAG_FLIP_X, renderQueue, 0x80ffffff, 0x10000 * (left3 - offset), 0x00, 0x00, 0x10000)
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// Text with alignment and line (0x88)		 //
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.TextManager.drawTextWithLine2() function without configurable transparency.
function void BlueSpheresTimer.TextManager.drawTextWithLine2(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font)
{
	BlueSpheresTimer.TextManager.drawTextWithLine(px, py, renderQueue, align, text, font, 255)
}

function void BlueSpheresTimer.TextManager.drawTextWithLine2(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, u8 alpha)
{
	s32 text_width = BlueSpheresTimer.TextManager.getTextWidth(text, font)
	s32 left = (align == 0x00) ? text_width : ((align == 0x01) ? text_width / 0x02 : 0x00)
	
	// Alignment:
	// - 0x00 - From Right
	// - 0x01 - From Center
	// - 0x02 - From Left
	
	BlueSpheresTimer.TextManager.basic(px - left, py, renderQueue, text, font, alpha)
	
	s32 left2 // Left line
	s32 left3 // Right line
	s32 offset = (text == "") ? 0x04 : 12
	bool allComplete = ((BlueSpheresTimer.Achievements.writed() - 0x01) == bluespheres.achievements.total)
	
	if (align == 0x00)
		left2 = ((px - getScreenExtend()) - text_width) - 0x08
	else if (align == 0x01)
	{
		left2 = ((px - getScreenExtend()) - (text_width / 0x02)) - 0x08
		left3 = (((getScreenWidth() - getScreenExtend()) - px) - (text_width / 0x02)) - 0x08
	}
	else if (align == 0x02)
		left2 = (px - getScreenExtend()) - 0x08
	else if (align == 0x03)
		left3 = (((getScreenWidth() - (74 - (bluespheres.achievements.sortselected != 0x00 ? 26 : (allComplete ? 0x05 : 0x00) )) - getScreenExtend()) - px) - text_width) - 0x08
	
	if !(align == 0x03)
		Renderer.drawCustomSpriteWithTransform("icon_whitedot", getScreenExtend() + 12, py, 0x00, 0x40, renderQueue, 0x80ffffff, 0x10000 * (left2 - offset), 0x00, 0x00, 0x10000)
	
	if (align == 0x01 || align == 0x03)
		Renderer.drawCustomSpriteWithTransform("icon_whitedot", (getScreenWidth() - (74 - (bluespheres.achievements.sortselected != 0x00 ? 26 : (allComplete ? 0x05 : 0x00) )) - getScreenExtend()) - 12, py, 0x00, SPRITE_FLAG_FLIP_X, renderQueue, 0x80ffffff, 0x10000 * (left3 - offset), 0x00, 0x00, 0x10000)
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// Text with alignment and keys 			 	//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.TextManager.drawTextWithKeys() function with the key and without configurable transparency.
function void BlueSpheresTimer.TextManager.drawTextWithKeys(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, string key1, string key2)
{
	BlueSpheresTimer.TextManager.drawTextWithKeys(px, py, renderQueue, align, text, font, 255, key1, key2)
}

function void BlueSpheresTimer.TextManager.drawTextWithKeys(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, u8 alpha, string key1, string key2)
{
	s32 text_width = BlueSpheresTimer.TextManager.getTextWidth(text, font)
	s32 left = (align == 0x00) ? 0x00 : ((align == 0x01) ? text_width / 0x02 : text_width)
	
	if (global.game_mode != 0x87)
		BlueSpheresTimer.TextManager.drawKeyboard_dual(px + left + 12, py, renderQueue, key1, key2, 0x00)
	BlueSpheresTimer.TextManager.drawText(px, py, renderQueue, align, text, font, alpha)
}

//? Render two keyboard keys with orientation.
function void BlueSpheresTimer.TextManager.drawKeyboard_dual(s32 px, s32 py, u16 renderQueue, string key1, string key2, u8 orientation)
{
	// Orientation:
	// - 0x00 - Horizontal
	// - 0x10 - Vertical
	
	if (orientation == 0x00)
	{
		BlueSpheresTimer.TextManager.drawKeyboard(px, py, renderQueue, key1)
		px += (key1 == "start") ? 18 : 0x00
		BlueSpheresTimer.TextManager.drawKeyboard(px + 0x0c, py, renderQueue, key2)
	}
	
	if (orientation == 0x10)
	{
		BlueSpheresTimer.TextManager.drawKeyboard(px, py - 0x06, renderQueue, key1)
		px += (key1 == "start") ? 18 : 0x00
		BlueSpheresTimer.TextManager.drawKeyboard(px, py + 0x06, renderQueue, key2)
	}
}

//? Render of a single key keyboard.
function void BlueSpheresTimer.TextManager.drawKeyboard(s32 px, s32 py, u16 renderQueue, string key)
{
	// Ignore rendering if this setting is disabled
	if !(SETTING_BS_SHOW_KEYBOARD_KEYS)
		return
	
	u8 alpha = 0xff
	// Transparent when any key pressed
	if (key == "x")
	{
		if (Input.buttonDown(BUTTON_B))
			alpha = 0x90
	}
	if (key == "y")
	{
		if (Input.buttonDown(BUTTON_Y))
			alpha = 0x90
	}
	if (key == "a")
	{
		if (Input.buttonDown(BUTTON_X))
			alpha = 0x90
	}
	if (key == "b")
	{
		if (Input.buttonDown(BUTTON_A))
			alpha = 0x90
	}
	if (key == "up")
	{
		if (control.pad1.state & CONTROL_UP)
			alpha = 0x90
	}
	if (key == "left")
	{
		if (control.pad1.state & CONTROL_LEFT)
			alpha = 0x90
	}
	if (key == "down")
	{
		if (control.pad1.state & CONTROL_DOWN)
			alpha = 0x90
	}
	if (key == "right")
	{
		if (control.pad1.state & CONTROL_RIGHT)
			alpha = 0x90
	}
	if (key == "start")
	{
		if (control.pad1.state & CONTROL_START)
			alpha = 0x90
	}
	
	// Check if the sprite exit
	if (Renderer.hasCustomSprite(stringformat("icon_key_%s", key)))
		Renderer.drawCustomSprite(stringformat("icon_key_%s", key), px, py, 0x00, 0x40, renderQueue, 0x00, alpha)
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - //
// (Original) Text with alignment				 //
// - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//? Simplified BlueSpheresTimer.TextManager.drawText() function without configurable transparency.
function void BlueSpheresTimer.TextManager.drawText(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font)
{
	BlueSpheresTimer.TextManager.drawText(px, py, renderQueue, align, text, font, 255)
}

//? The full text rendering code with text alignment.
function void BlueSpheresTimer.TextManager.drawText(s32 px, s32 py, u16 renderQueue, u8 align, string text, u8 font, u8 alpha)
{
	s32 text_width = BlueSpheresTimer.TextManager.getTextWidth(text, font)
	s32 left = (align == 0x00) ? text_width : ((align == 0x01) ? text_width / 0x02 : 0x00)
	
	// Alignment:
	// - 0x00 - From Right
	// - 0x01 - From Center
	// - 0x02 - From Left
	
	BlueSpheresTimer.TextManager.basic(px - left, py, renderQueue, text, font, alpha)
}

//? Returns the string of the menu item. For example, when the item is hovered: "* Name *", otherwise just "Name".
function string BlueSpheresTimer.TextManager.getMenuItem(u8 button_var, u8 button_target, string button_name)
{
	string key
	if (button_var == button_target)
		key = stringformat("* %s *", button_name)
	else
		key = button_name
	
	return key
}

// - - - - - - - - - - - - - - - - - - - //
// Basic								   //
// - - - - - - - - - - - - - - - - - - - //

//? The basic code for rendering text.
function void BlueSpheresTimer.TextManager.basic(s32 px, s32 py, u16 renderQueue, string text, u8 font, u8 alpha)
{
	s32 text_width
	for (s32 A = 0x00; A < strlen(text); ++A)
	{
		s32 character = getchar(text, A)
		
		if (character >= getChar("a") && character <= getChar("z"))
			character -= 32
		if (character == getChar("^"))
		{
			text_width = 0x00
			py += 16
		}
		
		BlueSpheresTimer.TextManager.renderCharacter(px, py, renderQueue, character, text_width, text, font, alpha)
		if !(character == getChar("^"))
			text_width += BlueSpheresTimer.TextManager.getSpacing(font, character)
	}
}

//? Single character rendering function. Some optimizations are also used here to fasted rendering.
function void BlueSpheresTimer.TextManager.renderCharacter(s32 px, s32 py, u16 renderQueue, s32 character, s32 text_width, string text, u8 font, u8 alpha)
{
	if ((px + text_width) >= getScreenWidth() || (px + text_width) <= -0x12)
		return
	if (py >= getScreenHeight() || py <= 0x00)
		return
	
	string key = stringformat("%s.%02d", BlueSpheresTimer.TextManager.getFont(font), character)
	if (Renderer.hasCustomSprite(key))
		Renderer.drawCustomSprite(key, px + text_width, py, 0x00, 0x40, renderQueue, 0x00, alpha)
}

//? Returns the total width of the entire text.
function s32 BlueSpheresTimer.TextManager.getTextWidth(string text, u8 font)
{
	s32 text_width
	for (s32 A = 0x00; A < strlen(text); ++A)
	{
		u8 character = getchar(text, A)
		
		if (character >= getChar("a") && character <= getChar("z"))
			character -= 32
		if (character == getChar("^"))
			 text_width = 0x00
		
		string key = stringformat("%s.%02d", BlueSpheresTimer.TextManager.getFont(font), character)
		if (Renderer.hasCustomSprite(key))
			text_width += BlueSpheresTimer.TextManager.getSpacing(font, character)
	}
	
	return text_width
}

//? Returns the font name.
function string BlueSpheresTimer.TextManager.getFont(u8 font)
{
	string font_name
	if (font == 0x00)
		font_name = "font_headline"
	else if (font == 0x01)
		font_name = "font_regular"
	else if (font == 0x02)
		font_name = "font_thin"
	else if (font == 0x03)
		font_name = "font_small"
	
	return font_name
}

//? Returns the width of the character of the specified parameters.
function u8 BlueSpheresTimer.TextManager.getSpacing(u8 font, u8 character)
{
	u8 character_width
	if (font == 0x00) // Headline font
	{
		if (character == getChar("A") || character == getChar("Q"))
			character_width = 18
		else if (character == getChar("M"))
			character_width = 17
		else if (character == getChar("B") || character == getChar("E") || character == getChar("F") || character == getChar("H") || character == getChar("K") || character == getChar("N") || character == getChar("O") || character == getChar("X"))
			character_width = 16
		else if (character == getChar("C") || character == getChar("D") || character == getChar("G") || character == getChar("I") || character == getChar("P") || character == getChar("R") || character == getChar("T") || character == getChar("W") || character == getChar("Y") || character == getChar(":") || character == getChar("'")  || character == getChar("`") || character == getChar("!") || character == getChar("?"))
			character_width = 15
		else if (character == getChar("(") || character == getChar(")"))
			character_width = 12
		else
			character_width = 14
	}
	else if (font == 0x01) // Regular font
	{
		if (character == getChar("*"))
			character_width = 15
		else if (character == getChar("M") || character == getChar("W"))
			character_width = 11
		else if (character == getChar("N"))
			character_width = 10
		else if (character == getChar("K") || character == getChar("Q") || character == getChar("X") || character == getChar("Z"))
			character_width = 9
		else
			character_width = 8
	}
	else if (font == 0x02) // Thin font
	{
		if (character == getChar("*"))
			character_width = 15
		else if (character == getChar("'") || character == getChar("`"))
			character_width = 6
		else
			character_width = 8
	}
	else if (font == 0x03) // Small font
	{
		if (character == getChar("M") || character == getChar("W"))
			character_width = 6
		else if (character == getChar(".") || character == getChar(",") || character == getChar("I") || character == getChar("!"))
			character_width = 2
		else
			character_width = 4
	}
	
	// Return value
	return character_width
}

//? Simplified view of the getchar() function without the second parameter.
function u8 getChar(string character)
{
	// Return character ASCII value
	return getchar(character, 0x00)
}