//? Check the activity of mods and assign a value to globals.
function void BlueSpheresTimer.modsCheck()
{
	// "Sonic 3: D.A. Garden Edition" by Thorn_SRetro, check https://gamebanana.com/mods/151029
	MOD_DAGE_ACTIVE	= Mods.isModActive("Sonic 3: D.A. Garden Edition")
	// "Blue Sphere Plus" by Veenee, check https://gamebanana.com/mods/297356
	MOD_BS_PLUS_ACTIVE	= Mods.isModActive("Blue Sphere Plus")
	// "Extra Slot Mighty" by iCloudius, check https://gamebanana.com/mods/336038
	MOD_EXTRA_MIGHTY_ACTIVE	= Mods.isModActive("Extra Slot Mighty")
	// "Extra Slot Ray" by iCloudius, check https://gamebanana.com/mods/336038
	MOD_EXTRA_RAY_ACTIVE	= Mods.isModActive("Extra Slot Ray")
}

//? Assemble art by frames.
function void BlueSpheresTimer.renderAssembleArt(string variant, u8 width, u8 height, u8 rows, u8 line, u8 totalFrames, u16 renderQueue, s32 px, s32 py, u8 scale)
{
	// Frame width and height based on scale
	width *= scale
	height *= scale
	
	// Center art
	px -= (width * line) / 0x02
	py -= (height * rows) / 0x02
	
	// Assemble and render art
	for (u8 A = 0x00; A < totalFrames; ++A)
	{
		string key = stringformat("%s%d", variant, A)
		if (Renderer.hasCustomSprite(key))
			Renderer.drawCustomSpriteWithTransform(key, px, py, 0x00, 0x00, renderQueue, 0xffffffff, 0x10000 * s32(scale), 0x00, 0x00, 0x10000 * s32(scale)) 
		
		// Offset for the next frame
		px += width
		
		for (u8 B = 0x00; B <= rows; ++B)
		{
			// Offset for the next row
			if ((A - (line * B)) == line - 0x01)
			{
				px -= width * line
				py += height
			}
		}
	}
	
	// Render background
	if (Renderer.hasCustomSprite(stringformat("%sbg", variant)))
		Renderer.drawCustomSpriteWithTransform(stringformat("%sbg", variant), 0x00, 0x00, 0x00, 0x00, renderQueue, 0xffffffff, 0x10000 * s32(getScreenWidth()), 0x00, 0x00, 0x10000 * s32(getScreenWidth()))
}

//? Overload function from Sonic 3: D.A. Garden Edition..
function void RenderSKLogoFullBG()
{
	// Only for Green Spheres mode
	if !(bluespheres.greenspheres.active)
		return
	
	Renderer.drawCustomSprite("hcz_watertint", 0x00, 0x00, 0x00, 0x00, 0x1701, 0x00, 40)
	
	Renderer.drawCustomSprite("sklogo_green", -80, 32, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 48, 32, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 176, 32, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 304, 32, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 432, 32, 0x00, 0x00, 0x1700)
	
	Renderer.drawCustomSprite("sklogo_green", -144, 96, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", -16, 96, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 112, 96, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 240, 96, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 368, 96, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 496, 96, 0x00, 0x00, 0x1700)
	
	Renderer.drawCustomSprite("sklogo_green", -80, 160, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 48, 160, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 176, 160, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 304, 160, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 432, 160, 0x00, 0x00, 0x1700)
	
	Renderer.drawCustomSprite("sklogo_green", -144, 224, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", -16, 224, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 112, 224, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 240, 224, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 368, 224, 0x00, 0x00, 0x1700)
	Renderer.drawCustomSprite("sklogo_green", 496, 224, 0x00, 0x00, 0x1700)
}

//? Update the bumper animation of the selected item in the menu.
function void BlueSpheresTimer.bumperFramerate()
{
	--bluespheres.bumperselect.timer
	if (s8(bluespheres.bumperselect.timer) < 0x00)
	{
		bluespheres.bumperselect.timer = 0x02
		++bluespheres.bumperselect.sprite
		bluespheres.bumperselect.sprite &= 0x07
	}
}

//? Resets the values of some global variables and the timer.
function void BlueSpheresTimer.resetTimer()
{
	bluespheres.timer.currentTime = 0x00
	bluespheres.timer.frames = 0x00
	bluespheres.timer.minutes = 0x00
	bluespheres.timer.seconds = 0x00
	bluespheres.timer.centiseconds = 0x00
	bluespheres.timer.bonus = 0x00
	
	bluespheres.gameOver = 0x00
	bluespheres.timeOver = 0x00
	bluespheres.timeOver.timeout = 0x00
}

//? Clear some data from the VRAM.
function void BlueSpheresTimer.VRAMClear()
{
	VDP.fillVRAMbyDMA(0x00, 0x0000, 0x40)
	VDP.fillVRAMbyDMA(0x00, 0xc000, 0x2000)
	VDP.fillVRAMbyDMA(0x00, 0xe000, 0x2000)
	
	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	
@loadPersistentData:
	// Load some Persistent Data
	BlueSpheresTimer.Records.loadPersistentData()
	BlueSpheresTimer.Achievements.loadPersistentData()
}

//? Loads some data into VRAM related with menu background.
function void BlueSpheresTimer.VRAMLoad_stagePreview()
{
	// "Get Blue Spheres" background stuff
	if (SETTING_BS_MENU_BACKGROUND == 0x02)
	{
		fn04cca6() // This seems to be a check for Sonic 1 lock-on
		if !(bluespheres.timeattack.active)
			fn04c8e4()
		
		u8[0xffffffa1] = 0x01
		u8[0xffffffab] = 0x00 // Set the 0x01 if you want to use the "Inactive" color theme
		
		A1 = (u8[0xffffffab] == 0x00) ? 0x04cb36 : 0x04cbb6
		A2 = 0xfffffc80
		copyMemory(A2, A1, 0x80)
		
		// Animated Tails eyes, Sonic hand, Knuckles smirk and Eggman head
		Kosinski.decompress(0x187d1c, 0xffff0000)
		Kosinski.decompress(0x188f1e, A1)
		updateSpritePattern(0xffff0000, 0x00, A1.u16 >> 0x01)
		
		// Static art
		Enigma.decompress(0x187cb0, 0xffff8000, 0x2000)
		A1 = 0xffff8000
		D0 = 0x43800003
		D1 = 0x27
		D2 = 0x0f
		CopyRectToVRAM()
		
		// Move planes a bit to the right
		for (u8 i = 0x00; i < getScreenHeight(); ++i)
			u32[0xffffe000 + i * 0x04] = getScreenExtend() * 0x10001
		
		u32[0xffffb094] = 0x04d986
		return
	}
	
	// "Sonic and Knuckles" background stuff
	if (SETTING_BS_MENU_BACKGROUND == 0x01)
	{
		copyMemory(0xfffffc80, 0x04de08, 0x80)
		
		Nemesis.loadDataToVRAM(0x0dde34, 0xb7e0)
		Nemesis.loadDataToVRAM(0x189c7c, 0x32e0)
		
		Enigma.decompress(0x189c4e, 0xffff8000, 0x6197)
		fn04dea2()
		return
	}
	
	// Ignore if this setting is disabled
	if !(SETTING_BS_STAGE_PREVIEW_ENABLE || SETTING_BS_MENU_OPTIMIZATION == 0x02)
		return
		
	copyMemory(0xffffe480, 0x00a10a, 0x70)
	zeroMemory(0xffffa400, 0x100)
	
	copyMemory(0xfffffc80, 0x00896e, 0x100)
	
	Nemesis.loadDataToVRAM(0x0ad904, 0xd000) // Spheres
	Nemesis.loadDataToVRAM(0x0adf60, 0xb4e0) // Rings
}

//? Returns the maximum number of available characters.
function u8 BlueSpheresTimer.maxCharacters()
{
	u8 maxCharacters = 0x02
	
	for (u8 char = 0x03; char > 0x00; --char)
	{
		if (Renderer.hasCustomSprite(stringformat("dataSel_slot%d", char)))
			++maxCharacters
	}
	
	// Return the value
	return maxCharacters
}

//? Overload function from Extra Character Slots.
function void ChooseWhichExtraChar()
{
	// Call the base function
	base.ChooseWhichExtraChar()
}

//? Updates the timer counter, and determines when the time is up, when unlimited time is not active.
function void BlueSpheresTimer.updateTimer()
{
	// Ignore for Main Special stages if this disabled
	if (SETTING_BS_TIME_BONUSES_ON_SPECIALS == 0x00 && bluespheres.timeattack.active == 0x00)
		return
	
	// Ignore for Rolling Demo and Blue Sphere game
	if (global.game_mode == 0x08 || bluespheres.minigame_mode)
		return
	
	bool timeUnlimited = BlueSpheresTimer.timeUnlimited()
	if (timeUnlimited ? (bluespheres.timer.currentTime < 595999) : (bluespheres.timer.currentTime < bluespheres.timer.timeLimit))
	{
		if (bluespheres.started_running && bluespheres.blue_remaining > 0x00 && bluespheres.gameOver != 0x01 && bluespheres.timeOver != 0x01)
			++bluespheres.timer.frames
		
		bluespheres.timer.seconds += bluespheres.timer.frames / 60
		bluespheres.timer.minutes += bluespheres.timer.seconds / 60
		bluespheres.timer.frames %= 60
		bluespheres.timer.seconds %= 60
	}
	else
	{
		bluespheres.timeOver = 0x01
	}
	
	bluespheres.timer.centiseconds = (bluespheres.timer.frames * 99 + 30) / 59
	bluespheres.timer.currentTime = bluespheres.timer.minutes * 10000 + bluespheres.timer.seconds * 100 + bluespheres.timer.centiseconds
}

//? Returns the formatted time from the already received data.
function string BlueSpheresTimer.getFormatTime(s32 input_minutes, s32 input_seconds, s32 input_centiseconds)
{
	string stringminutes = stringformat("%d", input_minutes)
	string stringseconds = stringformat("%d", input_seconds)
	string stringcentiseconds = stringformat("%d", input_centiseconds)
	
	string time = stringformat("%s'%s`%s", ((strlen(stringminutes) < 0x02) ? stringformat("0%d", input_minutes) : stringminutes), (strlen(stringseconds) < 0x02) ? stringformat("0%d", input_seconds) : stringseconds, (strlen(stringcentiseconds) < 0x02) ? stringformat("0%d", input_centiseconds) : stringcentiseconds)
	
	return time
}

//? Returns the formatted time from the input data.
function string BlueSpheresTimer.getFormatTime(s32 input_data)
{
	s32 minutes = input_data / 10000
	s32 seconds = (input_data - (minutes * 10000)) / 100
	s32 centiseconds = (input_data - (minutes * 10000)) - (seconds * 100)
	
	string stringminutes = stringformat("%d", minutes)
	string stringseconds = stringformat("%d", seconds)
	string stringcentiseconds = stringformat("%d", centiseconds)
	
	string time = stringformat("%s'%s`%s", ((strlen(stringminutes) < 0x02) ? stringformat("0%d", minutes) : stringminutes), (strlen(stringseconds) < 0x02) ? stringformat("0%d", seconds) : stringseconds, (strlen(stringcentiseconds) < 0x02) ? stringformat("0%d", centiseconds) : stringcentiseconds)
	
	return time
}

//? Returns true when there is a match. Used to determine the activity of unlimited time in the stages.
function bool BlueSpheresTimer.timeUnlimited()
{
	bool timeUnlimited
	
	if (Game.getSetting(SETTING_INFINITE_TIME))
		timeUnlimited = true
	else if (bluespheres.minigame_mode)
		timeUnlimited = true
	else if (bluespheres.timeattack.active)
		timeUnlimited = true
	else
		timeUnlimited = false
	
	return timeUnlimited
}