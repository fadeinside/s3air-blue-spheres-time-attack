//? Update the status of the current emerald in case of matches.
function void BlueSpheresTimer.Emeralds.update()
{
	// Do not perform any actions if the level was not successful
	if (u8[0xffffe44c] == 0x00)
		return
	
	// Do not perform any actions if all the rings are not collected at the stage. Ignore for Stage 7 S3, there no rings
	if (bluespheres.rings_remaining > 0x00 && !(bluespheres.timeattack.levelselected == 0x07 && bluespheres.timeattack.layoutselected == 0x00 && !MOD_DAGE_ACTIVE))
		return
	
	// Get an emerald for the currently selected level, if it is not received, and if these are S3 stages
	if (BlueSpheresTimer.Emeralds.getStatus(bluespheres.timeattack.levelselected) == 0x00 && bluespheres.timeattack.layoutselected == 0x00)
		BlueSpheresTimer.Emeralds.setStatus(bluespheres.timeattack.levelselected, 0x01)
	
	// Get a super emerald for the currently selected level if it is inactive, and if these stages S&K
	if (BlueSpheresTimer.Emeralds.getStatus(bluespheres.timeattack.levelselected) == 0x02 && bluespheres.timeattack.layoutselected == 0x01)
		BlueSpheresTimer.Emeralds.setStatus(bluespheres.timeattack.levelselected, 0x03)
}

//? Returns the icon of the specified emerald ID.
function string BlueSpheresTimer.Emeralds.getEmerald(u8 emeraldId)
{
	// Determine whether the status of the specified emerald ID is of chaos type or not
	string emeraldType
	if (BlueSpheresTimer.Emeralds.getStatus(emeraldId) == 0x00 || BlueSpheresTimer.Emeralds.getStatus(emeraldId) == 0x01)
		emeraldType = "chaos"
	else if (BlueSpheresTimer.Emeralds.getStatus(emeraldId) == 0x02 || BlueSpheresTimer.Emeralds.getStatus(emeraldId) == 0x03)
		emeraldType = "super"
	
	// If the emerald is inactive, then assign a distinctive ID
	if (BlueSpheresTimer.Emeralds.getStatus(emeraldId) == 0x00 || BlueSpheresTimer.Emeralds.getStatus(emeraldId) == 0x02)
		emeraldId = 0x0a
	
	// Determine the emerald color based on its ID
	u8 emeraldColor = emeraldId
#if GAMEAPP >= 0x21091200
	// Replace Yellow Emerald with Orange, and Orange with Yellow, if the mod "Yellow Emerald" is active. Otherwise use the original position
	if (MOD_YELLOW_EMERALD_ACTIVE)
	{
		if (emeraldColor == 0x01)
			emeraldId = 0x07
		else if (emeraldColor == 0x07)
			emeraldId = 0x01
		emeraldColor = emeraldId
	}
#endif
	
	// Build key
	string key = stringformat("icon_emerald_%s_0x%02x", emeraldType, emeraldColor)
	
	// Return sprite key
	return key
}

//? Return the assembled memory address for the specified Emerald ID.
function u32 BlueSpheresTimer.Emeralds.getAddress(u8 emeraldId)
{
	u32 emeraldID = 0x16 * (emeraldId + 0x01)
	u32 mods = MOD_DAGE_ACTIVE ? 0x100 : 0x00
	
	// Return the assembled address
	return bluespheres.emeraldsDataAddress + emeraldID + mods
}

//? Set a new value for all Emerald memory addresses.
function void BlueSpheresTimer.Emeralds.replaceAll(u8 status)
{
	// Number of emeralds (0x00 .. 0x07)
	for (u8 A = 0x00; A <= 0x07; ++A)
	{
		BlueSpheresTimer.Emeralds.setStatus(A, status)
	}
}

//? Check all Emerald memory addresses, if they are equal to the specified value, then return true.
function bool BlueSpheresTimer.Emeralds.allEqual(u8 status)
{
	if (BlueSpheresTimer.Emeralds.getStatus(0x00) == status && BlueSpheresTimer.Emeralds.getStatus(0x01) == status && BlueSpheresTimer.Emeralds.getStatus(0x02) == status && BlueSpheresTimer.Emeralds.getStatus(0x03) == status && BlueSpheresTimer.Emeralds.getStatus(0x04) == status && BlueSpheresTimer.Emeralds.getStatus(0x05) == status && BlueSpheresTimer.Emeralds.getStatus(0x06) == status && (BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked) ? BlueSpheresTimer.Emeralds.getStatus(0x07) == status : true))
	{
		return true
	}
	
	// Default return value
	return false
}

//? Returns the value for the specified Emerald ID.
function u8 BlueSpheresTimer.Emeralds.getStatus(u8 emeraldId)
{
	// Returns:
	// - 0x00 - Not collected
	// - 0x01 - Chaos Emerald collected
	// - 0x02 - Inactive Super Emerald
	// - 0x03 - Super Emerald collected
	
	u32 emeraldOffset = BlueSpheresTimer.Emeralds.getAddress(emeraldId)
	//System.loadPersistentData(emeraldOffset, stringformat("SRAM_BlueSpheresTimer_Emerald_0x%06x", emeraldOffset), 0x01)
	
	// Return the value
	return u8[emeraldOffset]
}

//? Sets a new value for the specified Emerald ID.
function void BlueSpheresTimer.Emeralds.setStatus(u8 emeraldId, u8 status)
{
	u32 emeraldOffset = BlueSpheresTimer.Emeralds.getAddress(emeraldId)
	u8[emeraldOffset] = status
	
	System.savePersistentData(emeraldOffset, stringformat("SRAM_BlueSpheresTimer_Emerald_0x%06x", emeraldOffset), 0x01)
}

//? Sets 0x00 for all Emerald memory addresses that are greater than 0x00.
function void BlueSpheresTimer.Emeralds.reset()
{
	// Number of emeralds (0x00 .. 0x07)
	for (u8 A = 0x00; A <= 0x07; ++A)
	{
		// D.A. Garden Edition Activity Status (0x00 .. 0x01)
		for (u8 B = 0x00; B <= 0x01; ++B)
		{
			u32 emeraldID = 0x16 * (A + 0x01)
			u32 mods = 0x100 * B
			
			u32 emeraldOffset = bluespheres.emeraldsDataAddress + emeraldID + mods
			//System.loadPersistentData(emeraldOffset, stringformat("SRAM_BlueSpheresTimer_Emerald_0x%06x", emeraldOffset), 0x01)
			
			// Set the 0x00 for an address if it is greater than 0x00
			if (u8[emeraldOffset] > 0x00)
			{
				u8[emeraldOffset] = 0x00
				System.savePersistentData(emeraldOffset, stringformat("SRAM_BlueSpheresTimer_Emerald_0x%06x", emeraldOffset), 0x00)
			}
		}
	}
}

//? Returns the number of Emerald memory addresses that are greater than 0x00.
function u8 BlueSpheresTimer.Emeralds.writed()
{
	u8 writed_addresses
	
	// Number of emeralds (0x00 .. 0x07)
	for (u8 A = 0x00; A <= 0x07; ++A)
	{
		// D.A. Garden Edition (0x00 .. 0x01)
		for (u8 B = 0x00; B <= 0x01; ++B)
		{
			u32 emeraldID = 0x16 * (A + 0x01)
			u32 mods = 0x100 * B
			
			u32 emeraldOffset = bluespheres.emeraldsDataAddress + emeraldID + mods
			//System.loadPersistentData(emeraldOffset, stringformat("SRAM_BlueSpheresTimer_Emerald_0x%06x", emeraldOffset), 0x01)
			
			// Add +1 to variable if address greater than 0x00
			if (u8[emeraldOffset] > 0x00)
			{
				writed_addresses += 0x01
			}
		}
	}
	
	// Return the value
	return writed_addresses
}

//? Load data about saved emeralds into memory.
function void BlueSpheresTimer.Emeralds.loadPersistentData()
{
	// Number of emeralds (0x00 .. 0x07)
	for (u8 A = 0x00; A <= 0x07; ++A)
	{
		// D.A. Garden Edition (0x00 .. 0x01)
		for (u8 B = 0x00; B <= 0x01; ++B)
		{
			u32 emeraldID = 0x16 * (A + 0x01)
			u32 mods = 0x100 * B
			
			u32 emeraldOffset = bluespheres.emeraldsDataAddress + emeraldID + mods
			System.loadPersistentData(emeraldOffset, stringformat("SRAM_BlueSpheresTimer_Emerald_0x%06x", emeraldOffset), 0x01)
		}
	}
}