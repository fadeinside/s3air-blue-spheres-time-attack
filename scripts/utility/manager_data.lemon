//? Return the assembled memory address for the specified Data address.
function u32 BlueSpheresTimer.Data.getAddress(u32 address)
{
	u32 mods = (address <= bluespheres.skUnlocked) ? (MOD_DAGE_ACTIVE ? 0x100 : 0x00) : 0x00
	
	// Return the assembled address
	return address + mods
}

//? Returns the value of the specified address.
function u8 BlueSpheresTimer.Data.getValue(u32 address)
{
	u32 addressOffset = BlueSpheresTimer.Data.getAddress(address)
	System.loadPersistentData(addressOffset, stringformat("SRAM_BlueSpheresTimer_Data_0x%06x", addressOffset), 0x01)
	
	// Return the value
	return u8[addressOffset]
}

//? Sets a new value for the specified address.
function void BlueSpheresTimer.Data.setValue(u32 address, u8 value)
{
	u32 addressOffset = BlueSpheresTimer.Data.getAddress(address)
	u8[addressOffset] = value
	
	System.savePersistentData(addressOffset, stringformat("SRAM_BlueSpheresTimer_Data_0x%06x", addressOffset), 0x01)
}

//? Add a new value for the specified address.
function void BlueSpheresTimer.Data.addValue(u32 address, u8 value)
{
	u32 addressOffset = BlueSpheresTimer.Data.getAddress(address)
	u8 math = BlueSpheresTimer.Data.getValue(address) + value
	u8[addressOffset] = math
	
	System.savePersistentData(addressOffset, stringformat("SRAM_BlueSpheresTimer_Data_0x%06x", addressOffset), 0x01)
	
	//System.writeDisplayLine(stringformat("Added value %d and saved in 0x%06x RAM", value, addressOffset))
}

//? Sets 0x00 for all Data memory addresses that are greater than 0x00.
function void BlueSpheresTimer.Data.reset(u32 address)
{
	// D.A. Garden Edition (0x00 .. 0x01)
	for (u8 A = 0x00; A <= 0x01; ++A)
	{
		u32 mods = 0x100 * A
		
		u32 addressOffset = address + mods
		System.loadPersistentData(addressOffset, stringformat("SRAM_BlueSpheresTimer_Data_0x%06x", addressOffset), 0x01)
		
		// Set the 0x00 for an address if it is greater than 0x00
		if (u8[addressOffset] > 0x00)
		{
			u8[addressOffset] = 0x00
			System.savePersistentData(addressOffset, stringformat("SRAM_BlueSpheresTimer_Data_0x%06x", addressOffset), 0x00)
		}
	}
}

//? Returns the number of Data memory addresses that are greater than 0x00.
function u8 BlueSpheresTimer.Data.writed(u32 address)
{
	u8 writed_addresses
	
	// D.A. Garden Edition (0x00 .. 0x01)
	for (u8 A = 0x00; A <= 0x01; ++A)
	{
		u32 mods = 0x100 * A
		
		u32 addressOffset = address + mods
		System.loadPersistentData(addressOffset, stringformat("SRAM_BlueSpheresTimer_Data_0x%06x", addressOffset), 0x01)
		
		// Set the 0x00 for an address if it is greater than 0x00
		if (u8[addressOffset] > 0x00)
		{
			writed_addresses += 0x01
		}
	}
	
	// Return the value
	return writed_addresses
}