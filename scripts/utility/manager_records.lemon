//? Checks for matches of values/events.
function void BlueSpheresTimer.Records.update()
{
	// Do not perform any actions if the level was not successful
	if (u8[0xffffe44c] == 0x00)
		return
	
	// Do not perform any actions if the record and time same, also, this can fixes copying 2 record place to 3 and 4 in some cases. I'm cry
	if (BlueSpheresTimer.Records.getRecordTime(0x01) == bluespheres.timer.currentTime || BlueSpheresTimer.Records.getRecordTime(0x02) == bluespheres.timer.currentTime || BlueSpheresTimer.Records.getRecordTime(0x03) == bluespheres.timer.currentTime || BlueSpheresTimer.Records.getRecordTime(0x04) == bluespheres.timer.currentTime)
		return
	
	if (BlueSpheresTimer.Records.getRecordTime(0x01) == 0x00 || BlueSpheresTimer.Records.getRecordTime(0x01) > bluespheres.timer.currentTime)
	{
		if (BlueSpheresTimer.Records.getRecordTime(0x03) != 0x00)
			BlueSpheresTimer.Records.setNewRecordTime(0x04, BlueSpheresTimer.Records.getRecordTime(0x03))
		if (BlueSpheresTimer.Records.getRecordTime(0x02) != 0x00)
			BlueSpheresTimer.Records.setNewRecordTime(0x03, BlueSpheresTimer.Records.getRecordTime(0x02))
		if (BlueSpheresTimer.Records.getRecordTime(0x01) != 0x00)
			BlueSpheresTimer.Records.setNewRecordTime(0x02, BlueSpheresTimer.Records.getRecordTime(0x01))
		BlueSpheresTimer.Records.setNewRecordTime(0x01, bluespheres.timer.currentTime)
	}
	else if (BlueSpheresTimer.Records.getRecordTime(0x02) == 0x00 || BlueSpheresTimer.Records.getRecordTime(0x02) > bluespheres.timer.currentTime)
	{
		if (BlueSpheresTimer.Records.getRecordTime(0x03) != 0x00)
			BlueSpheresTimer.Records.setNewRecordTime(0x04, BlueSpheresTimer.Records.getRecordTime(0x03))
		if (BlueSpheresTimer.Records.getRecordTime(0x02) != 0x00)
			BlueSpheresTimer.Records.setNewRecordTime(0x03, BlueSpheresTimer.Records.getRecordTime(0x02))
		BlueSpheresTimer.Records.setNewRecordTime(0x02, bluespheres.timer.currentTime)
	}
	else if (BlueSpheresTimer.Records.getRecordTime(0x03) == 0x00 || BlueSpheresTimer.Records.getRecordTime(0x03) > bluespheres.timer.currentTime)
	{
		if (BlueSpheresTimer.Records.getRecordTime(0x03) != 0x00)
			BlueSpheresTimer.Records.setNewRecordTime(0x04, BlueSpheresTimer.Records.getRecordTime(0x03))
		BlueSpheresTimer.Records.setNewRecordTime(0x03, bluespheres.timer.currentTime)
	}
	else if (BlueSpheresTimer.Records.getRecordTime(0x04) == 0x00 || BlueSpheresTimer.Records.getRecordTime(0x04) > bluespheres.timer.currentTime)
	{
		BlueSpheresTimer.Records.setNewRecordTime(0x04, bluespheres.timer.currentTime)
	}
}

//? Returns the address of the specified Record place.
function u32 BlueSpheresTimer.Records.getRecordAddress(u8 place)
{
	u32 recordplace = 0x1024 * place
	u32 character = 0x128 * ((bluespheres.timeattack.characterselected + 0x01) + (bluespheres.timeattack.xtracharselected - 0x01))
	u32 stage = 0x16 * (bluespheres.timeattack.levelselected + 0x01)
	u32 layout = bluespheres.timeattack.layoutselected * 0x08
	u32 mods = Mods.isModActive("Sonic 3: D.A. Garden Edition") ? 0x10000 : 0x00
	
	return bluespheres.recordDataAddress + recordplace + character + stage + layout + mods
}

//? Returns the time of the specified Record place.
function s32 BlueSpheresTimer.Records.getRecordTime(u32 place)
{
	u32 recordOffset = BlueSpheresTimer.Records.getRecordAddress(place)
	System.loadPersistentData(recordOffset, stringformat("SRAM_BlueSpheresTimer_Record_0x%06x", recordOffset), 0x04)
	
	return s32[recordOffset]
}

//? Sets a new time for the specified Record place.
function void BlueSpheresTimer.Records.setNewRecordTime(u8 place, s32 data)
{
	u32 recordOffset = BlueSpheresTimer.Records.getRecordAddress(place)
	s32[recordOffset] = data
	
	System.savePersistentData(recordOffset, stringformat("SRAM_BlueSpheresTimer_Record_0x%06x", recordOffset), 0x04)
	
	//System.writeDisplayLine(stringformat("Saved time %s for 0x%06x in RAM", BlueSpheresTimer.getFormatTime(s32[recordOffset]), recordOffset))
}

//? Sets the value to 0 for all recorded Records memory addresses.
function void BlueSpheresTimer.Records.reset()
{
	for (u8 A = 0x00; A <= 0x07; ++A)
	{
		for (u8 B = 0x01; B <= 0x04; ++B)
		{
			for (u8 C = 0x00; C <= 0x06; ++C)
			{
				for (u8 D = 0x00; D <= 0x01; ++D)
				{
					for (u8 E = 0x00; E <= 0x01; ++E)
					{
						u32 recordplace = 0x1024 * B
						u32 character = 0x128 * (C + 0x01)
						u32 stage = 0x16 * (A + 0x01)
						u32 layout = D * 0x08
						u32 mods = E * 0x10000
						
						u32 recordOffset = bluespheres.recordDataAddress + recordplace + character + stage + layout + mods
						
						System.loadPersistentData(recordOffset, stringformat("SRAM_BlueSpheresTimer_Record_0x%06x", recordOffset), 0x04)
						
						if (s32[recordOffset] != 0x00)
						{
							s32[recordOffset] = 0x00
							System.savePersistentData(recordOffset, stringformat("SRAM_BlueSpheresTimer_Record_0x%06x", recordOffset), 0x00)
							
							//debugLog(stringformat("Reset RAM 0x%06x", recordOffset))
						}
					}
				}
			}
		}
	}
}

//? Returns the number of memory addresses that are not equal to 0, within the records addresses.
function s32 BlueSpheresTimer.Records.writed()
{
	s32 writed_address
	
	for (u8 A = 0x00; A <= 0x07; ++A)
	{
		for (u8 B = 0x01; B <= 0x04; ++B)
		{
			for (u8 C = 0x00; C <= 0x06; ++C)
			{
				for (u8 D = 0x00; D <= 0x01; ++D)
				{
					for (u8 E = 0x00; E <= 0x01; ++E)
					{
						u32 recordplace = 0x1024 * B
						u32 character = 0x128 * (C + 0x01)
						u32 stage = 0x16 * (A + 0x01)
						u32 layout = D * 0x08
						u32 mods = E * 0x10000
						
						u32 recordOffset = bluespheres.recordDataAddress + recordplace + character + stage + layout + mods
						
						System.loadPersistentData(recordOffset, stringformat("SRAM_BlueSpheresTimer_Record_0x%06x", recordOffset), 0x04)
						
						if (s32[recordOffset] > 0x00)
						{
							writed_address += 0x01
						}
					}
				}
			}
		}
	}
	
	return writed_address
}