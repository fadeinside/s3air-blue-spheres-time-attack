//@ Function taken from sonic3air_dev/scripts/objects/basics/giantring.lemon
//# address-hook(0x061682) end(0x061690)
function void GiantRing.BaseUpdate()
{
	// Targets:
	// - 0x06169a	-> objA0.base_state = 0x00  -> Initialization
	// - 0x0616e6	-> objA0.base_state = 0x02  -> Regular update
	// - 0x0617b8	-> objA0.base_state = 0x04  -> Character jumped in
	
	// Reset the timer when the character jumps into a special ring
	if (objA0.base_state == 0x04)
		BlueSpheresTimer.resetTimer()
	
	// Call the base function
	base.GiantRing.BaseUpdate()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x009e88) end(0x009e9e)
function void BlueSpheres.OnBlueSphereCollected()
{
	++bluespheres.blue_collected
	BlueSpheresTimer.Achievements.blueCollectedChecks()
	
	// Call the base function
	base.BlueSpheres.OnBlueSphereCollected()
}

//@ Function taken from sonic3air_dev/scripts/general/bluespheregame.lemon
//# address-hook(0x04d6b8) end(0x04d7a0)
function void fn04d6b8()
{
	if (control.pad1.pressed & CONTROL_B || Input.buttonPressed(BUTTON_BACK))
	{
		playSound(0xad)
		global.game_mode = 0x89
		return
	}
	
	// Call the base function
	base.fn04d6b8()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x009ea0) end(0x009eba)
function void fn009ea0()
{
	bluespheres.blue_collected = 0x00
	bluespheres.continue_granted = 0x00
	
	// Call the base function
	base.fn009ea0()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x009b62) end(0x009d1c)
function void fn009b62()
{
	// Ignore for Rolling Demo and Blue Sphere game
	if (global.game_mode == 0x08 || bluespheres.minigame_mode)
	{
		// Call the base function
		base.fn009b62()
		return
	}
	
	// Timer update
	BlueSpheresTimer.updateTimer()
	
	// Let us make the achievements that depend on the completion of the stage
	BlueSpheresTimer.Achievements.stageEventsChecks()
	
	// Time over
	if (bluespheres.timeOver == 0x01 && u8[0xffffe44c] == 0x00)
	{
		if (bluespheres.lifted_height < 0x100)
		{
			if (bluespheres.lifted_height == 0x00)
				playMusic(0x66)
			bluespheres.lifted_height += (bluespheres.lifted_height >= 0x7d) ? 0x04 : (bluespheres.lifted_height >= 0x3e) ? 0x03 : 0x02
			return
		}
		
		// Fade out any music and clear spheres data
		playMusic(MUSIC_CTRL_FADEOUT)
		zeroMemory(0xfffff100, 0x400)
		++bluespheres.timeOver.timeout
		
		// Make the character slow down
		D0.u8 = bluespheres.direction
		LookupSinCos()
		D2.u16 = bluespheres.position.x
		D3.u16 = bluespheres.position.y
		D0.s16 <<= 0x03
		D1.s16 <<= 0x03
		D2.u16 -= D0.u16
		D3.u16 -= D1.u16
		
		D0.u16 = ((D2.u16 + 0x80) >> 0x08) & 0x1f
		D1.u16 = ((D3.u16 + 0x80) >> 0x08) & 0x1f
		D1.u16 = (D1.u16 << 0x05) | D0.u16
		
		u16[0xffffe44e] = D1.u16
		u16[0xffffe428] = 0x0800
		u8[0xffffe44d] = 0x78
		
		// Timeout before returning to the menu/level
		if (bluespheres.timeOver.timeout >= 0xc8)
		{
			if (bluespheres.timeattack.active)
			{
				// Back to Time Attack menu
				global.game_mode = 0x85
			}
			else
			{
				global.game_mode = (bluespheres.minigame_mode == 0x00) ? 0x48 : 0x2c
				if (global.stage_type != 0x00)
				{
					global.zone_act = level.backup.zone_act
					checkpoint.number |= 0x80
				}
			}
			
			if (bluespheres.timeOver.timeout == 0xc8)
				playSound(0x6a)
		}
	}
	
	// Collected all blue spheres in Time attack
	if (bluespheres.timeattack.active)
	{
		if (u8[0xffffe44c] == 0x01)
		{
		#if STANDALONE
			Game.startSkippableCutscene()
		#endif
			
			if (bluespheres.lifted_height < 0x100)
			{
				if (bluespheres.lifted_height == 0x00)
					playMusic(0x66)
				bluespheres.lifted_height += (bluespheres.lifted_height >= 0x7d) ? 0x04 : (bluespheres.lifted_height >= 0x3e) ? 0x03 : 0x02
				return
			}
			
			// Fade out any music and clear spheres data
			playMusic(MUSIC_CTRL_FADEOUT)
			zeroMemory(0xfffff100, 0x400)
			
			// Update records
			BlueSpheresTimer.Records.update()
			
			// Make the character slow down
			D0.u8 = bluespheres.direction
			LookupSinCos()
			D2.u16 = bluespheres.position.x
			D3.u16 = bluespheres.position.y
			D0.s16 <<= 0x03
			D1.s16 <<= 0x03
			D2.u16 -= D0.u16
			D3.u16 -= D1.u16
			
			D0.u16 = ((D2.u16 + 0x80) >> 0x08) & 0x1f
			D1.u16 = ((D3.u16 + 0x80) >> 0x08) & 0x1f
			D1.u16 = (D1.u16 << 0x05) | D0.u16
			
			u16[0xffffe44e] = D1.u16
			u16[0xffffe428] = 0x0800
			u8[0xffffe44d] = 0x78
			
			// Skip the emerald if it has already been received, or do you play with inactive super emeralds in S3 stages
			if ((BlueSpheresTimer.Emeralds.getStatus(bluespheres.timeattack.levelselected) == 0x01 || BlueSpheresTimer.Emeralds.getStatus(bluespheres.timeattack.levelselected) == 0x03) || BlueSpheresTimer.Emeralds.getStatus(bluespheres.timeattack.levelselected) == 0x02 && !bluespheres.timeattack.layoutselected)
			{
				// Go to the shared menu
				global.game_mode = 0x87
				return
			}
			
			// Skip the emerald if all the rings are not collected
			if (bluespheres.rings_remaining > 0x00 && !(bluespheres.timeattack.levelselected == 0x07 && bluespheres.timeattack.layoutselected == 0x00 && !Mods.isModActive("Sonic 3: D.A. Garden Edition")))
			{
				// I'm just using "Time Over" dependencies to create "Not Enough Rings"
				bluespheres.notEnoughRings = 0x01
				bluespheres.timeOver = 0x01
				++bluespheres.timeOver.timeout
				
				// Timeout before returning to the menu
				if (bluespheres.timeOver.timeout >= 0xc8)
				{
					// Go to the shared menu
					global.game_mode = 0x87
					
					if (bluespheres.timeOver.timeout == 0xc8)
						playSound(0x6a)
				}
				return
			}
			
			// Spawn the emerald
			++u8[0xffffe44c]
			
			A1 = 0xfffff100
			u8[A1 + D1.s16] = global.lock_on_state ? 0x0d : 0x0b
			
			D0 = global.next_bluespheres
			A1 = 0x009d1e + (D0.s16 & 0x07) * 0x08
			copyMemory(0xfffffc64, A1, 0x08)

			A1 = global.lock_on_state ? 0x0ae99e : 0x0ae3ec
			Kosinski.addToDMAQueue(A1, 0xb4e0)
		}
		else if (u8[0xffffe44c] == 0x02)
		{
			if (kosinski.waiting_modules == 0x00)
			{
				u16[0xffffe44a] = 0x00
				--u8[0xffffe44d]
				if (u8[0xffffe44d] == 0x00)
				{
						++u8[0xffffe44c]
						playMusic(0x2b)
				}
			}
		}
		else if (u8[0xffffe44c] == 0x03)
		{
			D0.u16 = ((bluespheres.position.x + 0x80) >> 0x08) & 0x1f
			D1.u16 = ((bluespheres.position.y + 0x80) >> 0x08) & 0x1f
			D1.u16 = (D1.u16 << 0x05) | D0.u16
			
			if (D1.u16 == u16[0xffffe44e])
			{
				D0.u16 = (bluespheres.position.x | bluespheres.position.y) & 0xe0
				if (D0.u16 == 0x00)
				{
				#if STANDALONE
					Game.endSkippableCutscene()
				#endif
					
					// Update emeralds
					BlueSpheresTimer.Emeralds.update()
					
					++u8[0xffffe44c]
					// Make everything spin around
					u8[0xffffe433] = 0x01
			
					// Go to the shared menu
					global.game_mode = 0x87
					playSound(0x6a)
				}
			}
		}
	}
	
	// Ran into red sphere
	if (u8[0xffffe433] == 0x01 && !(u8[0xffffe44c] >= 0x03))
	{
		bluespheres.gameOver = 0x01
		if (bluespheres.timeattack.active)
		{
			// Fade out any music
			playMusic(MUSIC_CTRL_FADEOUT)
			// Back to Time Attack menu
			global.game_mode = 0x85
		}
	}
	
	// Ignore the base call when receiving an emerald in Time attack mode
	if (u8[0xffffe44c] != 0x00 && bluespheres.timeattack.active)
		return
	
	// Call the base function
	base.fn009b62()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x00972e) end(0x0098ae)
function void fn00972e()
{
	BlueSpheresTimer.Achievements.spheresChecks()
	
	// Call the base function
	base.fn00972e()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x00903e) end(0x00919e)
function void fn00903e()
{
	BlueSpheresTimer.Achievements.characterActionsCheck()
	
	// Call the base function
	base.fn00903e()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x008e94) end(0x008ee6)
function void fn008e94()
{
	if (objA0.value32 != 0x00)
		--objA0.value32
	else
	{
		if (u16[A0 + 0x30] >= 0xc0 + getScreenExtend())
		{
			if (bluespheres.rings_remaining == 0x00)
			{
				objA0.update_address = 0x008eec
				objA0.animation.sprite += 0x02
			}
			
			if (bluespheres.timeOver == 0x01)
			{
				objA0.update_address = 0x008f24
				objA0.animation.sprite += 0x02
			}
			
			if (bluespheres.movement_speed == 0x00)
			{
				bluespheres.going_forward = 0x01
				bluespheres.started_running = 0x01
			}
		}
		else
		{
			u16[A0 + 0x30] += 0x10
		}
	}
	
	D0.u16 = 0x120 + getScreenExtend()
	D0.s16 += (objA0.flags2a & 0x01) ? s16[A0 + 0x30] : -s16[A0 + 0x30]
	objA0.position.x.u16 = D0.u16
	
	DrawObject()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x008eec) end(0x008f1e)
function void fn008eec()
{
	if (bluespheres.timeOver != 0x01)
	{
		u16[A0 + 0x30] -= 0x10
		if (u16[A0 + 0x30] == 0x00)
		{
			objA0.update_address = 0x008f24
			objA0.value32 = 0xb4
		}
	}
	else
	{
		if (objA0.value32 != 0x00)
		{
			--objA0.value32
			DrawObject()
			return
		}
	
		if (u16[A0 + 0x30] < 0xc0 + getScreenExtend())
		{
			u16[A0 + 0x30] += 0x10
		}
	}

	D0.u16 = 0x120 + getScreenExtend()
	D0.s16 += (objA0.flags2a & 0x01) ? s16[A0 + 0x30] : -s16[A0 + 0x30]
	objA0.position.x.u16 = D0.u16

	DrawObject()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x008f24) end(0x008f58)
function void fn008f24()
{
	if (bluespheres.timeOver != 0x01)
	{
		if (objA0.value32 != 0x00)
		{
			--objA0.value32
			DrawObject()
			return
		}

		if (u16[A0 + 0x30] < 0xc0 + getScreenExtend())
		{
			u16[A0 + 0x30] += 0x10
		}
	}
	else
	{
		u16[A0 + 0x30] -= 0x10
		if (u16[A0 + 0x30] == 0x00)
		{
			objA0.update_address = 0x008eec
			objA0.value32 = 0xb4
		}
	}
	
	D0.u16 = 0x120 + getScreenExtend()
	D0.s16 += (objA0.flags2a & 0x01) ? s16[A0 + 0x30] : -s16[A0 + 0x30]
	objA0.position.x.u16 = D0.u16

	DrawObject()
}

//@ Function taken from sonic3air_dev/scripts/maingame/maingame.lemon
//# address-hook(0x0013e4) end(0x0014e4)
function void UpdateGamePause()
{
	if (bluespheres.timeattack.active != 0x01)
	{
		// Call the base function
		base.UpdateGamePause()
		return
	}
	
#if STANDALONE
	if (global.game.paused != true)
	{
		if ((control.pad1.pressed & CONTROL_START) == 0x00)
			return
			
		global.game.paused = true
	}
	
	syncZ80_variantB(0x01)
	BlueSpheresTimer.Menu.pause.setup()
	syncZ80_variantB(0x80)
	
	global.game.paused = false
#endif
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x02e3da) end(0x02e40e)
function void fn02e3da()
{
	if !(SETTING_BS_TIME_BONUSES_ON_SPECIALS)
	{
		// Call the base function
		base.fn02e3da()
		return
	}
	
	A1 = A0 + 0x4a
	A2 = 0x02e834
	D1 = 0x12
	fn02e802()

	results.ring_bonus = u32(bluespheres.rings_collected) * 0x0a
	results.time_bonus = (bluespheres.rings_remaining == 0x00) ? 5000 : 0x00
	
	if (bluespheres.gameOver != 0x01 && bluespheres.timeOver != 0x01)
	{
		if (bluespheres.timer.currentTime == 45900) // Special time bonus for 4:59
			bluespheres.timer.bonus = 10000
		else
		{
			if (bluespheres.timer.currentTime < 4800) // 0:00 ~ 0:48
				bluespheres.timer.bonus = 5000
			else if (bluespheres.timer.currentTime < 13000) // 0:49 ~ 1:29
				bluespheres.timer.bonus = 1000
			else if (bluespheres.timer.currentTime < 20000) // 1:30 ~ 1:59
				bluespheres.timer.bonus = 500
			else if (bluespheres.timer.currentTime < 23000) // 2:00 ~ 2:29
				bluespheres.timer.bonus = 100
			else if (bluespheres.timer.currentTime < 30000) // 2:30 ~ 2:59
				bluespheres.timer.bonus = 50
			else if (bluespheres.timer.currentTime < 40000) // 3:00 ~ 3:59
				bluespheres.timer.bonus = 10
			else // 4:00 ~ 59:59
				bluespheres.timer.bonus = 0x00
		}
	}
	else
	{
		if (bluespheres.timer.currentTime == 45900) // Special time bonus for 4:59
			bluespheres.timer.bonus = 500
		else
		{
			if (bluespheres.timer.currentTime < 13000) // 0:00 ~ 1:29
				bluespheres.timer.bonus = 0x00
			else if (bluespheres.timer.currentTime < 23000) // 1:30 ~ 2:29
				bluespheres.timer.bonus = 10
			else if (bluespheres.timer.currentTime < 40000) // 2:30 ~ 3:59
				bluespheres.timer.bonus = 50
			else if (bluespheres.timer.currentTime < 50000)  // 4:00 ~ 4:58
				bluespheres.timer.bonus = 100
			else // 5:00 ~ 59:59
				bluespheres.timer.bonus = 100
		}
	}
	
	// Wait for six seconds
	objA0.countdown_value = 0x168
#if STANDALONE
	// Shorten the wait time a bit
	objA0.countdown_value -= 0x14
#endif
	objA0.base_state += 0x02
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x02e410) end(0x02e4d2)
function void fn02e410()
{
	if !(SETTING_BS_TIME_BONUSES_ON_SPECIALS)
	{
		base.fn02e410()
		return
	}
	
	if (objA0.countdown_value != 0x00)
	{
		// Still waiting
		--objA0.countdown_value
		if (objA0.countdown_value == 0x00 && global.lock_on_state == 0x00 && global.sk_bluespheres && bluespheres.blue_remaining == 0x00)
		{
			palette_fade.range = 0x003f
			global.fade_timer = 0x16

			A1 = 0xfffffc00
			u16[A1 + 0x42] = 0x0eee
			u16[A1 + 0x44] = 0x0eee
			u16[A1 + 0x4c] = 0x0eee
			u16[A1 + 0x62] = 0x0eee
			u16[A1 + 0x66] = 0x0eee
			u16[A1 + 0x6e] = 0x0eee
			u16[A1 + 0x70] = 0x0eee
			u16[A1 + 0x7c] = 0x0eee
			u16[A1 + 0x7e] = 0x0eee
		}

	#if STANDALONE
		if (objA0.countdown_value == 0x10d)
	#else
		if (objA0.countdown_value == 0x121)
	#endif
		{
			playMusic(MUSIC_LEVELCLEAR)
		}
	}
	else
	{
		// Counting bonusses towards score
		u16 delta = 0x0a
		
	#if STANDALONE
		if (Game.getSetting(SETTING_LEVELRESULT_SCORE))
		{
			// Count faster over time
			if (results.total_bonus >= 0xbb8)
				delta = 0x1e
			else if (results.total_bonus >= 0x3e8)
				delta = 0x14

			// Allow for manually (more or less) skipping the counter
			if (control.pad1.state & (CONTROL_ABC | CONTROL_START))
				delta = 0xc8
		}
	#endif

		D0 = 0x00
		if (bluespheres.timer.bonus != 0x00)
		{
			u16 diff = min(delta, bluespheres.timer.bonus)
			D0.u16 += diff
			bluespheres.timer.bonus -= diff
		}
		if (results.time_bonus != 0x00)
		{
			u16 diff = min(delta, results.time_bonus)
			D0.u16 += diff
			results.time_bonus -= diff
		}
		if (results.ring_bonus != 0x00)
		{
			u16 diff = min(delta, results.ring_bonus)
			D0.u16 += diff
			results.ring_bonus -= diff
		}

	#if STANDALONE
		// Needed for SETTING_LEVELRESULT_SCORE
		results.total_bonus += D0.u16
	#endif
	
		if (D0.u16 != 0x00)
		{
			// Still counting
			AddScore()
			if ((level.framecounter & 0x03) == 0x00)
				playSound(SFX_CLICK)
		}
		else
		{
			playSound(0xb0)
			objA0.countdown_value = 0x78
			objA0.base_state += 0x02
			fn02e4d6()
		}
	}
}