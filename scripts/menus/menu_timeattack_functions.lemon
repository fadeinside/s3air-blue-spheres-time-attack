function void BlueSpheresTimer.Menu.timeattack.background()
{
	// SK Blue Sphere logo
	if (SETTING_BS_MENU_BACKGROUND != 0x01) // Do not render this if the "Sonic and Knuckles" theme is enabled
		Renderer.drawCustomSprite("sklogo", getScreenWidth() / 0x02, 40, 0x40, 0x00, 0xF000)
	
	// Copyright
	if !(bluespheres.popup.show && SETTING_BS_MENU_OPTIMIZATION)
	{
		Renderer.drawCustomSprite("icon_copyright", getScreenWidth() - 104, 210, 0x00, 0x40, 0xf000)
		Renderer.drawCustomSprite("title_screen_cr", getScreenWidth() - 92, 206, 0x40, 0x00, 0xf000)
	}
	
	// Draw a gradient so that the objects are more clearly visible on the background
	for (u8 A = 0x00; A <= 0x01 + (getScreenWidth() / 0x10); ++A)
		Renderer.drawCustomSprite("background_menu", 0x10 * A, 0x00, 0x00, 0x40, 0xf000, 0x00, (SETTING_BS_MENU_BACKGROUND == 0x01) ? 0xba : 0xff)
	
	// Render stage preview
	BlueSpheresTimer.Menu.timeattack.stagePreview()
}

function void BlueSpheresTimer.Menu.timeattack.stagePreview()
{
	// Let's make the background move from the bottom up if "Sonic and Knuckles" theme is enabled
	if (SETTING_BS_MENU_BACKGROUND == 0x01)
	{
		D0 = (s16[0xffffe402] < 0x00) ? -0x400 : 0x400
		D0 += u32[0xffffeed8]
		
		if (D0.s32 < -0x8000)
			D0 = -0x8000
		else if (D0.s32 > 0x8000)
			D0 = 0x8000
		
		u32[0xffffeed8] = D0
		camera.background.y += D0
		camera.background.y.u16 &= 0xff
		
		fn059990()
		
		// Finish the function on this
		return
	}
	
	// We will make the ground static, as in the first release, when the menu optimization setting is active
	if (SETTING_BS_MENU_OPTIMIZATION)
	{
		bluespheres.position.x = 1024
		bluespheres.position.y = 1024
		bluespheres.direction = 96
		
		// Load ground colors
		A1 = u32[0x0088ba + bluespheres.timeattack.levelselected * 0x10]
		if (bluespheres.timeattack.layoutselected)
			A1 += 0x0130
		
		if (Mods.isModActive("Sonic 3: D.A. Garden Edition"))
			A1 += 0x2cb80e
		
		u32[0xffffe446] = A1
		A2 = 0xfffffc80
		
		copyMemory(A2 + 0x70, A1, 0x10)
	
		// Render ground
		BlueSpheres.renderCustomGround()
		
		// Finish the function on this
		return
	}
	
	// Some things to make the ground animate
	u8[0xffffe433] = 0x00
	bluespheres.lifted_height = 0x00
	bluespheres.movement_speed = 0x500
	
	D2.s16 = bluespheres.movement_speed
	D0.u8 = bluespheres.direction
	
	LookupSinCos()
	D0.s32 = s32(D0.s16) * D2.s16
	D1.s32 = s32(D1.s16) * D2.s16
	bluespheres.position.x -= D0 >> 0x10
	bluespheres.position.y -= D1 >> 0x10
	
	// Load ground colors
	A1 = u32[0x0088ba + bluespheres.timeattack.levelselected * 0x10]
	if (bluespheres.timeattack.layoutselected)
		A1 += 0x0130
	
	if (Mods.isModActive("Sonic 3: D.A. Garden Edition"))
		A1 += 0x2cb80e
	
	u32[0xffffe446] = A1
	A2 = 0xfffffc80
	
	copyMemory(A2 + 0x70, A1, 0x10)
	
	// Render ground
	BlueSpheres.renderCustomGround()
	
	// Ignore the spheres render if this setting is disabled
	if !(SETTING_BS_STAGE_PREVIEW_ENABLE)
	{
		bluespheres.direction = 0x40
		
		// Finish the function on this
		return
	}
	
	// Main game stages
	Kosinski.decompress(u32[0x1e4078], 0xffff0000)
	// "Sonic 3: D.A. Garden Edition" by Thorn_SRetro, check https://gamebanana.com/mods/151029
	if (Mods.isModActive("Sonic 3: D.A. Garden Edition") && bluespheres.timeattack.characterselected == 0x02) // Knuckles has a different level layout in DAGE
		Kosinski.decompress(0x2d3ad0, 0xffff0000)
	
	// Load level layout, either from S3 or S&K
	A2 = bluespheres.timeattack.layoutselected ? 0x008590 : 0x25e2d8
	A2 = u32[A2 + bluespheres.timeattack.levelselected * 0x04]
	if !(bluespheres.timeattack.layoutselected)
	{
		A2 += 0x200000
		if (Mods.isModActive("Sonic 3: D.A. Garden Edition") && bluespheres.timeattack.characterselected == 0x02) // Knuckles has a different level layout in DAGE
			A2 += 0x0679b0
	}
	
	zeroMemory(0xfffff000, 0x100)
	copyMemory(0xfffff100, A2, 0x400)
	zeroMemory(0xfffff500, 0x100)
	A2 += 0x400
	
	// Sets the camera in the right place
	bool stageChanged = control.pad1.pressed & (CONTROL_UP | CONTROL_DOWN)
	bool layoutChanged = Input.buttonPressed(BUTTON_X) && BlueSpheresTimer.Data.getValue(bluespheres.skUnlocked)
	bool characterChanged = Input.buttonPressed(BUTTON_Y) && (bluespheres.timeattack.characterselected == 0x02 && Mods.isModActive("Sonic 3: D.A. Garden Edition")) // Knuckles has a different level layout in DAGE
	if (global.game_mode == 0x85 && !bluespheres.popup.show && (stageChanged || layoutChanged || characterChanged))
	{
		u16[0xffffe426] = u16[A2]
		bluespheres.position.x = u16[A2 + 0x02]
		bluespheres.position.y = u16[A2 + 0x04]
	}
	
	if (bluespheres.direction != 0x00 || bluespheres.direction != 64 || bluespheres.direction != 128 || bluespheres.direction != 192) // Fixes camera direction when you return to the menu after red sphere or emerald
		u16[0xffffe426] = u16[A2]
		
	if (global.game_mode == 0x89 && bluespheres.position.x == 0x00) // Sets the correct camera position when you first log in to the Lobby
	{
		bluespheres.position.x = u16[A2 + 0x02]
		bluespheres.position.y = u16[A2 + 0x04]
	}
	
	// Rings framerate
	fn009d9e()
	
	// Render spheres
	BlueSpheres.RenderSpheres()
}

function void BlueSpheresTimer.Menu.timeattack.headline()
{
	if (bluespheres.popup.show && SETTING_BS_MENU_OPTIMIZATION)
		return
	
	s32 offset = 216
	s32 px = getScreenWidth() / 0x02 - offset
	
	for (u8 A = 0x00; A < 0x04; ++A)
		BlueSpheresTimer.TextManager.drawText(px + (offset * A) - ((level.framecounter * 0x02) % offset), 25, 0xf000, 0x01, STRING_TIME_ATTACK_HEADLINE, 0x00)
}

function void BlueSpheresTimer.Menu.timeattack.items()
{
	if (bluespheres.popup.show && SETTING_BS_MENU_OPTIMIZATION)
		return
	
	s32 px = getScreenWidth() / 0x02
	s32 py = 46
	
	BlueSpheresTimer.Menu.timeattack.items.keys(px, py)
	BlueSpheresTimer.Menu.timeattack.items.menu(px, py)
	
	BlueSpheresTimer.Menu.timeattack.items.total(px, py)
	BlueSpheresTimer.Menu.timeattack.items.recordslist(px, py)
	
	BlueSpheresTimer.Menu.timeattack.items.playerselect(px, py)
	BlueSpheresTimer.Menu.timeattack.items.emeralds(px, py)
	
	BlueSpheresTimer.Menu.timeattack.items.levelselect(px, py)
	BlueSpheresTimer.Menu.timeattack.items.levelslayout(px, py)
}

function void BlueSpheresTimer.Menu.timeattack.items.keys(s32 px, s32 py)
{
	// Ignore if popup menu active
	if (bluespheres.popup.show)
		return
	
	// Set position
	px = 18
	py = getScreenHeight() - 18
	
	BlueSpheresTimer.TextManager.drawKeyboard(px, py, 0xf000, "b")
	px += 13
	BlueSpheresTimer.TextManager.drawKeyboard(px, py, 0xf000, "start")
	px += 18 // Additional offset by "start"
	px += 13
	BlueSpheresTimer.TextManager.drawKeyboard_dual(px, py, 0xf000, "left", "right", 0x00)
}

function void BlueSpheresTimer.Menu.timeattack.items.menu(s32 px, s32 py)
{
	px -= 128
	string button_options = BlueSpheresTimer.TextManager.getMenuItem(bluespheres.timeattack.buttonselected, 0x00, STRING_TIME_ATTACK_OPTIONS)
	BlueSpheresTimer.TextManager.drawText(px, getScreenHeight() - py, 0xf000, 0x01, button_options, 0x01)
	
	px += 128
	string button_start = BlueSpheresTimer.TextManager.getMenuItem(bluespheres.timeattack.buttonselected, 0x01, STRING_TIME_ATTACK_START)
	BlueSpheresTimer.TextManager.drawText(px, getScreenHeight() - py, 0xf000, 0x01, button_start, 0x01)
	
	px += 128
	string button_achievements = BlueSpheresTimer.TextManager.getMenuItem(bluespheres.timeattack.buttonselected, 0x02, STRING_TIME_ATTACK_ACHIEVEMENTS)
	BlueSpheresTimer.TextManager.drawText(px, getScreenHeight() - py, 0xf000, 0x01, button_achievements, 0x01)
}

function void BlueSpheresTimer.Menu.timeattack.items.total(s32 px, s32 py)
{
	BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_TOTAL, 0x01)
	
	s32 minutes_total
	s32 seconds_total
	s32 centiseconds_total
	
	u8 gangMain = (bluespheres.timeattack.characterselected + 0x01)
	u8 gangExtra = bluespheres.timeattack.characterselected == 0x03 ? (bluespheres.timeattack.xtracharselected - 0x01) : 0x00
	
	// Number of stages (0x00 .. 0x06, 0x07)
	u8 maxStages = BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked) ? 0x07 : 0x06
	for (u8 A = 0x00; A <= maxStages; ++A)
	{
		// Number of record places (0x01 .. 0x04)
		for (u8 B = 0x01; B <= 0x04; ++B)
		{
			u32 recordplace = 0x1024 * B
			u32 character = 0x128 * (gangMain + gangExtra)
			u32 stage = 0x16 * (A + 0x01)
			u32 layout = 0x08 * bluespheres.timeattack.layoutselected
			u32 mods = Mods.isModActive("Sonic 3: D.A. Garden Edition") ? 0x10000 : 0x00
			
			u32 recordOffset = bluespheres.recordDataAddress + recordplace + character + stage + layout + mods
			System.loadPersistentData(recordOffset, stringformat("SRAM_BlueSpheresTimer_Record_0x%06x", recordOffset), 0x04)
			
			// Get parsed data from address value
			s32 minutes = s32[recordOffset] / 10000
			s32 seconds = (s32[recordOffset] - (minutes * 10000)) / 100
			s32 centiseconds = (s32[recordOffset] - (minutes * 10000)) - (seconds * 100)
			
			//debugLog(stringformat("Loaded RAM 0x%06x: %s", recordOffset, BlueSpheresTimer.getFormatTime(minutes, seconds, centiseconds)))
			
			// If the address value is greater than 0x00, then add its parsed values to the variables. Otherwise add a static value to a variable
			if (s32[recordOffset] > 0x00)
			{
				minutes_total += minutes
				seconds_total += seconds
				centiseconds_total += centiseconds
			}
			else
			{
				minutes_total += 10
			}
		}
	}
	
	seconds_total += centiseconds_total / 60
	minutes_total += seconds_total / 60
	centiseconds_total %= 99
	seconds_total %= 60
	
	py += 16
	BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, stringformat("* %s *", BlueSpheresTimer.getFormatTime(minutes_total, seconds_total, centiseconds_total)), 0x02)
}

function void BlueSpheresTimer.Menu.timeattack.items.recordslist(s32 px, s32 py)
{
	py += 44
	BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_RECORDS, 0x01)
	
	for (u8 A = 0x01; A <= 0x04; ++A)
	{
		py += 16
		string name = (A == 0x01) ? "st" : ((A == 0x02) ? "nd" : ((A == 0x03) ? "rd" : ((A == 0x04) ? "th" : "")))
		BlueSpheresTimer.Menu.timeattack.items.table(px, py, 0xf000, 0x02, stringformat("%d%s", A, name), BlueSpheresTimer.Records.getRecordTime(A))
	}
}

function void BlueSpheresTimer.Menu.timeattack.items.playerselect(s32 px, s32 py)
{
	px -= 128
	BlueSpheresTimer.TextManager.drawTextWithKeys(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_CHARACTER, 0x01, "y", "")
	BlueSpheresTimer.TextManager.drawText(px, py + 16, 0xf000, 0x01, "*    *", 0x02)
	
	string key
	if (bluespheres.timeattack.characterselected == CHARACTER_SONIC)
		key = "continue_icon_sonic"
	else if (bluespheres.timeattack.characterselected == CHARACTER_TAILS)
		key = "continue_icon_tails"
	else if (bluespheres.timeattack.characterselected == CHARACTER_KNUCKLES)
		key = "continue_icon_knuckles"
	else if (bluespheres.timeattack.characterselected == 0x03)
		key = stringformat("continue_icon_slot%d", bluespheres.timeattack.xtracharselected)
	
	if (Renderer.hasCustomSprite(key))
	{
		Renderer.drawCustomSprite(key, px, py + 28, 0x40, 0x00, 0xf000)
	}
}

function void BlueSpheresTimer.Menu.timeattack.items.emeralds(s32 px, s32 py)
{
	px -= 128
	py += 44
	BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_EMERALDS, 0x01)
	
	u8 width = BlueSpheresTimer.Data.getValue(bluespheres.skUnlocked) ? 16 : 14
	
	px -= BlueSpheresTimer.Data.getValue(bluespheres.skUnlocked) ? 26 : 22
	py += 16
	for (u8 A = 0x00; A < 0x04; ++A)
	{
		Renderer.drawCustomSprite(BlueSpheresTimer.Emeralds.getEmerald(A), px + (width * A), py, 0x00, 0x40, 0xf000)
		//debugLog(stringformat("Loaded RAM 0x%06x: 0x%02x", BlueSpheresTimer.Emeralds.getAddress(A), BlueSpheresTimer.Emeralds.getStatus(A)))
	}
	
	if !(BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked))
		px += 7
	
	py += 15
	for (u8 B = 0x00; B < (BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked) ? 0x04 : 0x03); ++B)
	{
		Renderer.drawCustomSprite(BlueSpheresTimer.Emeralds.getEmerald(B + 0x04), px + (width * B), py, 0x00, 0x40, 0xf000)
		//debugLog(stringformat("Loaded RAM 0x%06x: 0x%02x", BlueSpheresTimer.Emeralds.getAddress(B + 0x04), BlueSpheresTimer.Emeralds.getStatus(B + 0x04)))
	}
}

function void BlueSpheresTimer.Menu.timeattack.items.levelselect(s32 px, s32 py)
{
	px += 128
	BlueSpheresTimer.TextManager.drawTextWithKeys(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_LEVEL, 0x01, "up", "down")
	
	py += 16
	if (bluespheres.timeattack.levelselected == 0x07)
		BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_SECRET, 0x01)
	else
		BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, stringformat("* 0%d *", bluespheres.timeattack.levelselected + 0x01), 0x02)
}

function void BlueSpheresTimer.Menu.timeattack.items.levelslayout(s32 px, s32 py)
{
	px += 128
	u8 alpha = BlueSpheresTimer.Data.getValue(bluespheres.skUnlocked) ? 0xff : 0x90
	
	py +=  44
	BlueSpheresTimer.TextManager.drawTextWithKeys(px, py, 0xf000, 0x01, STRING_TIME_ATTACK_LAYOUT, 0x01, alpha, "a", "")
	
	py += 16
	BlueSpheresTimer.TextManager.drawText(px, py, 0xf000, 0x01, stringformat("* %s *", bluespheres.timeattack.layoutselected ? STRING_TIME_ATTACK_SK : STRING_TIME_ATTACK_S3), 0x01, alpha)
}

function void BlueSpheresTimer.Menu.timeattack.items.table(s32 px, s32 py, u16 renderQueue, u8 align, string text, s32 input_data)
{
	px -= 12
	BlueSpheresTimer.TextManager.drawText(px - 38, py, renderQueue, align, text, 0x01)
	
	if (input_data == 0x00)
	{
		BlueSpheresTimer.TextManager.drawText(px, py, renderQueue, align, "--'--`--", 0x02)
		return
	}
	
	BlueSpheresTimer.TextManager.drawText(px, py, renderQueue, align, BlueSpheresTimer.getFormatTime(input_data), 0x02)
}

function void BlueSpheresTimer.Menu.timeattack.updateControl()
{
	// Ignore if popup menu active
	if (bluespheres.popup.show)
		return
	
	// Button selection
	if (control.pad1.pressed & (CONTROL_LEFT | CONTROL_RIGHT))
	{
		playSound(0x5b)
		if (control.pad1.pressed & CONTROL_LEFT)
		{
			if (bluespheres.timeattack.buttonselected != 0x00)
				--bluespheres.timeattack.buttonselected
			else
				bluespheres.timeattack.buttonselected = bluespheres.buttons.setup
		}
		else if (control.pad1.pressed & CONTROL_RIGHT)
		{
			if (bluespheres.timeattack.buttonselected < bluespheres.buttons.setup)
				++bluespheres.timeattack.buttonselected
			else
				bluespheres.timeattack.buttonselected = 0x00
		}
	}
	
	// Switch stages
	u8 maxStages = BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked) ? 0x07 : 0x06
	if (control.pad1.pressed & (CONTROL_UP | CONTROL_DOWN))
	{
		playSound(0x5b)
		if (control.pad1.pressed & CONTROL_UP)
		{
			if (bluespheres.timeattack.levelselected < maxStages)
				++bluespheres.timeattack.levelselected
			else
				bluespheres.timeattack.levelselected = 0x00
		}
		if (control.pad1.pressed & CONTROL_DOWN)
		{
			if (bluespheres.timeattack.levelselected != 0x00)
				--bluespheres.timeattack.levelselected
			else
				bluespheres.timeattack.levelselected = maxStages
		}
	}
	
	// Change the character
	u8 maxCharacters = BlueSpheresTimer.maxCharacters()
	if (Input.buttonPressed(BUTTON_Y))
	{
		playSound(0x5b)
		if (bluespheres.timeattack.characterselected < 0x03)
		{
			++bluespheres.timeattack.characterselected
			if (bluespheres.timeattack.characterselected > maxCharacters)
				bluespheres.timeattack.characterselected = 0x00
			
			// Set the available ID for the extra character as the first value
			if (bluespheres.timeattack.characterselected == 0x03)
			{
				if (Renderer.hasCustomSprite("dataSel_slot1"))
					bluespheres.timeattack.xtracharselected = 0x01
				else if (Renderer.hasCustomSprite("dataSel_slot2"))
					bluespheres.timeattack.xtracharselected = 0x02
				else if (Renderer.hasCustomSprite("dataSel_slot3"))
					bluespheres.timeattack.xtracharselected = 0x03
				else
				{
					bluespheres.timeattack.characterselected = 0x00
					bluespheres.timeattack.xtracharselected = 0x00
				}
			}
		}
		else
		{
			// Check the availability of extra characters, if available, then set it, otherwise reset and go to Sonic
			if (bluespheres.timeattack.xtracharselected == 0x01)
			{
				if (Renderer.hasCustomSprite("dataSel_slot2"))
					bluespheres.timeattack.xtracharselected = 0x02
				else if (Renderer.hasCustomSprite("dataSel_slot3"))
					bluespheres.timeattack.xtracharselected = 0x03
				else
				{
					bluespheres.timeattack.characterselected = 0x00
					bluespheres.timeattack.xtracharselected = 0x00
				}
			}
			else if (bluespheres.timeattack.xtracharselected == 0x02)
			{
				if (Renderer.hasCustomSprite("dataSel_slot3"))
					bluespheres.timeattack.xtracharselected = 0x03
				else
				{
					bluespheres.timeattack.characterselected = 0x00
					bluespheres.timeattack.xtracharselected = 0x00
				}
			}
			else
			{
				bluespheres.timeattack.characterselected = 0x00
				bluespheres.timeattack.xtracharselected = 0x00
			}
		}
	}
	
	// Change the levels layout from S3 to SK
	if (Input.buttonPressed(BUTTON_X))
	{
		if (BlueSpheresTimer.Data.getValue(bluespheres.skUnlocked))
		{
			playSound(0x5b)
			++bluespheres.timeattack.layoutselected
			if (bluespheres.timeattack.layoutselected > 0x01)
				bluespheres.timeattack.layoutselected = 0x00
		}
		else
		{
			playSound(0x7b)
		}
	}
	
	// Perform the action of selected button when start pressed
	if (control.pad1.pressed & CONTROL_START)
	{
		if (bluespheres.timeattack.buttonselected == 0x00)
		{
			playSound(0x63)
			bluespheres.timeattack.active = 0x00
			global.game_mode = 0x86
		}
		if (bluespheres.timeattack.buttonselected == 0x01)
		{
			playSound(0xaf)
			bluespheres.timeattack.active = 0x01
			BlueSpheresTimer.EntryFunctions.startSpecialStage()
		}
		if (bluespheres.timeattack.buttonselected == 0x02)
		{
			playSound(0x63)
			bluespheres.timeattack.active = 0x00
			global.game_mode = 0x88
		}
	}
	
	// Go back to the main menu
	if (control.pad1.pressed & CONTROL_B)
	{
		playSound(0xad)
		bluespheres.timeattack.active = 0x00
		global.game_mode = 0x89
	}
}

function void BlueSpheresTimer.Menu.timeattack.popups()
{
	if (bluespheres.popup.show == 0x00)
		return
	
	if (BlueSpheresTimer.Emeralds.allEqual(0x01) && !BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked))
	{
		BlueSpheresTimer.Menu.popup.show(STRING_UNLOCK_NOW_UNLOCKED, STRING_UNLOCK_SECRET_STAGE, "", "", STRING_OKAY)
		if (control.pad1.pressed & CONTROL_START)
		{
			playSound(0x63)
			BlueSpheresTimer.Data.setValue(bluespheres.stage8Unlocked, 0x01)
			
			bluespheres.popup.show = 0x00
		}
	}
	
	if (BlueSpheresTimer.Emeralds.allEqual(0x01) && BlueSpheresTimer.Data.getValue(bluespheres.stage8Unlocked) && !BlueSpheresTimer.Data.getValue(bluespheres.skUnlocked))
	{
		BlueSpheresTimer.Menu.popup.show(STRING_UNLOCK_NOW_UNLOCKED, STRING_UNLOCK_SK_STAGES, "", "", STRING_OKAY)
		if (control.pad1.pressed & CONTROL_START)
		{
			playSound(0x63)
			BlueSpheresTimer.Data.setValue(bluespheres.skUnlocked, 0x01)
			BlueSpheresTimer.Emeralds.replaceAll(0x02)
			
			bluespheres.popup.show = 0x00
		}
	}
}