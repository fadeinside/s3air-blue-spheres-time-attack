function void BlueSpheresTimer.Menu.medals.headline()
{
	s32 offset = 146
	s32 px = getScreenWidth() / 0x02 - offset
	
	for (u8 A = 0x00; A < 0x04; ++A)
		BlueSpheresTimer.TextManager.drawText(px + (offset * A) - ((level.framecounter * 0x02) % offset), 25, 0xf000, 0x01, STRING_MEDALS_HEADLINE, 0x00)
}

function void BlueSpheresTimer.Menu.medals.items()
{
	if (bluespheres.popup.show && SETTING_BS_MENU_OPTIMIZATION)
		return
	
	s32 px = getScreenWidth() / 0x02
	s32 py = 46
	
	BlueSpheresTimer.Menu.medals.items.keys(px, py)
	BlueSpheresTimer.Menu.medals.items.menu(px, py)
	
	BlueSpheresTimer.Menu.medals.items.medals(px, py)
}

function void BlueSpheresTimer.Menu.medals.items.keys(s32 px, s32 py)
{
	// Ignore if popup menu active
	if (bluespheres.popup.show)
		return
	
	// Set position
	px = 18
	py = getScreenHeight() - 18
	
	// Bools
	bool isBackButton = bluespheres.medals.buttonselected == bluespheres.buttons.setup
	bool isUnlockedMedal = false
	for (u8 A = 0x00; A <= bluespheres.medals.medals.setup; ++A)
	{
		if (bluespheres.medals.medalselected == A)
		{
			if (BlueSpheresTimer.Medals.isUnlocked(bluespheres.medals.buttonselected, A))
				isUnlockedMedal = true
		}
	}
	bool showStartButton = isUnlockedMedal || isBackButton
	bool showLeftRightButtons = !isBackButton
	
	BlueSpheresTimer.TextManager.drawKeyboard(px, py, 0xf000, "b")
	px += 13
	if (showStartButton)
	{
		BlueSpheresTimer.TextManager.drawKeyboard(px, py, 0xf000, "start")
		px += 18 // Additional offset by "start"
		px += 13
	}
	BlueSpheresTimer.TextManager.drawKeyboard_dual(px, py, 0xf000, "up", "down", 0x00)
	px += 11 // Additional offset by second key ^
	px += 13
	if (showLeftRightButtons)
	{
		BlueSpheresTimer.TextManager.drawKeyboard_dual(px, py, 0xf000, "left", "right", 0x00)
	}
}

function void BlueSpheresTimer.Menu.medals.items.menu(s32 px, s32 py)
{
	string button_back = BlueSpheresTimer.TextManager.getMenuItem(bluespheres.medals.buttonselected, bluespheres.buttons.setup, STRING_BACK)
	BlueSpheresTimer.TextManager.drawText(px, getScreenHeight() - py, 0xf000, 0x01, button_back, 0x01)
}

function void BlueSpheresTimer.Menu.medals.items.menu(s32 px, s32 py)
{
	string button_back = BlueSpheresTimer.TextManager.getMenuItem(bluespheres.medals.buttonselected, bluespheres.buttons.setup, STRING_BACK)
	BlueSpheresTimer.TextManager.drawText(px, getScreenHeight() - py, 0xf000, 0x01, button_back, 0x01)
}

function void BlueSpheresTimer.Menu.medals.items.medals(s32 px, s32 py)
{
	BlueSpheresTimer.Menu.medals.items.scrollbar()
	
	if (bluespheres.medals.buttonselected >= 0x01 && !(bluespheres.medals.buttonselected >= bluespheres.buttons.setup))
	{
		for (u8 A = 0x00; A <= bluespheres.medals.buttonselected - 0x01; ++A)
			py -= 128
	}
	
	px -= 164
	py += 0x08
	for (u8 A = 0x00; A < bluespheres.buttons.setup; ++A)
	{
		u8 alpha = (py < 54 || py > getScreenHeight() - 54) ? 48 : ((py >= 130) ? 150 : 255)
		
		if (A == 0x00)
			BlueSpheresTimer.Menu.medals.items.tableAchievements(px, py, 0xf000, alpha)
		else if (A == 0x01)
			BlueSpheresTimer.Menu.medals.items.tableRecords(px, py, 0xf000, CHARACTER_SONIC, alpha)
		else if (A == 0x02)
			BlueSpheresTimer.Menu.medals.items.tableRecords(px, py, 0xf000, CHARACTER_TAILS, alpha)
		else if (A == 0x03)
			BlueSpheresTimer.Menu.medals.items.tableRecords(px, py, 0xf000, CHARACTER_KNUCKLES, alpha)
		
		// Offset for the next category
		py += 128
	}
}

function void BlueSpheresTimer.Menu.medals.items.scrollbar()
{
	// Ignore if popup menu active
	if (bluespheres.popup.show)
		return
	
	if (control.pad1.state & (CONTROL_UP | CONTROL_DOWN))
	{
		if ((bluespheres.medals.buttonselected >= 0x01 && (bluespheres.medals.buttonselected != bluespheres.buttons.setup)) || (bluespheres.medals.buttonselected > 0x01 && (bluespheres.medals.buttonselected == bluespheres.buttons.setup) && control.pad1.state & CONTROL_DOWN))
		{
			bluespheres.scrollbar.alpha = 0xff
			bluespheres.scrollbar.timer = 0x00
		}
	}
	
	if (bluespheres.scrollbar.alpha != 0x00)
	{
		++bluespheres.scrollbar.timer
		if (bluespheres.scrollbar.timer >= 0x0a)
		{
			bluespheres.scrollbar.alpha -= bluespheres.scrollbar.timer
			if (bluespheres.scrollbar.timer >= 0x5a)
			{
				bluespheres.scrollbar.alpha = 0x00
				bluespheres.scrollbar.timer = 0x00
			}
		}
	}
	
	s32 scrollOffset = ((getScreenHeight() - 88) / bluespheres.buttons.setup) * ((bluespheres.medals.buttonselected == bluespheres.buttons.setup) ? 0x00 : bluespheres.medals.buttonselected)
	
	Renderer.drawCustomSprite("icon_scrollbar", getScreenWidth(), 44 + scrollOffset, 0x00, 0x40, 0xf000, 0x00, bluespheres.scrollbar.alpha)
}

function void BlueSpheresTimer.Menu.medals.items.tableRecords(s32 px, s32 py, u16 renderQueue, u8 character, u8 alpha)
{
	bool japanese = !(global.region_code & 0x80)
	string sign_title = stringformat("%s (%s)", STRING_TIME_ATTACK_RECORDS, character == CHARACTER_SONIC ? STRING_CHARACTER_SONIC : (character == CHARACTER_TAILS ? (japanese ? STRING_CHARACTER_MILES : STRING_CHARACTER_TAILS) : (character == CHARACTER_KNUCKLES ? STRING_CHARACTER_KNUCKLES : STRING_RETRY)))
	BlueSpheresTimer.Menu.medals.items.tableTitle(px, py, renderQueue, sign_title, alpha)
	
	px += 0x07
	py += 32
	for (u8 A = 0x01; A <= 0x10; ++A)
	{
		// Draw border
		if ((bluespheres.medals.medalselected == A) && !(bluespheres.medals.buttonselected >= bluespheres.buttons.setup) && (py == 86 || py == 134) && ((bluespheres.buttons.scrollTimer < 25) ? (level.framecounter & 0x08) : true))
			Renderer.drawCustomSprite("icon_medal_borderBlock", px, py, 0x40, 0x00, renderQueue, 0x00, alpha)
		
		// Draw medal sprite
		Renderer.drawCustomSprite("icon_medal_lock", px, py, 0x40, 0x00, renderQueue, 0x00, alpha)
		
		// Offset for the next object
		px += 40
			
		// Offset for the next row
		if (A == 0x08)
		{
			px -= (40 * 0x08)
			py += 48
		}
	}
}

function void BlueSpheresTimer.Menu.medals.items.tableAchievements(s32 px, s32 py, u16 renderQueue, u8 alpha)
{
	BlueSpheresTimer.Menu.medals.items.tableTitle(px, py, renderQueue, STRING_TIME_ATTACK_ACHIEVEMENTS, alpha)
	
	px += 0x07
	py += 32
	for (u8 A = 0x01; A <= 0x0f; ++A)
	{
		// Draw border
		if ((bluespheres.medals.medalselected == A) && !(bluespheres.medals.buttonselected >= bluespheres.buttons.setup) && (py == 86 || py == 134) && ((bluespheres.buttons.scrollTimer < 25) ? (level.framecounter & 0x08) : true))
			Renderer.drawCustomSprite("icon_medal_borderBlock", px, py, 0x40, 0x00, renderQueue, 0x00, alpha)
		
		// Draw medal sprite
		Renderer.drawCustomSprite(BlueSpheresTimer.Medals.isUnlocked(0x00, A) ? BlueSpheresTimer.Medals.getSprite(0x00, A) : "icon_medal_lock", px, py, 0x40, 0x00, renderQueue, 0x00, alpha)
	
		// Offset for the next object
		if (A > 0x08)
			px += 47
		else
			px += 40
			
		// Offset for the next row
		if (A == 0x08)
		{
			px -= (40 * 0x08)
			py += 48
		}
	}
}

function void BlueSpheresTimer.Menu.medals.status()
{
	s32 px = getScreenWidth() / 0x02
	s32 py = 76 + ((getScreenHeight() / 0x02) - bluespheres.popup.offsetDescription)
	
	// Draw medal sprite
	Renderer.drawCustomSprite(BlueSpheresTimer.Medals.getSprite(bluespheres.medals.buttonselected, bluespheres.medals.medalselected), px - 18, py, 0x40, 0x00, 0xf001)
}

function void BlueSpheresTimer.Menu.medals.items.tableTitle(s32 px, s32 py, u16 renderQueue, string text, u8 alpha)
{
	BlueSpheresTimer.TextManager.drawText(px - 0x06, py, renderQueue, 0x02, "*", 0x01, alpha)
	
	px += 16
	BlueSpheresTimer.TextManager.drawTextWithLine(px, py, renderQueue, 0x03, text, 0x01, alpha)
}

function void BlueSpheresTimer.Menu.medals.updateControl()
{
	// Tooltip show
	if (bluespheres.tooltip.show != "")
	{
		BlueSpheresTimer.Menu.tooltip.setup("gray", "icon_tooltip_info", (bluespheres.tooltip.timeout >= (SETTING_BS_TOAST_DURATION / 0x02)) ? STRING_TOOLTIP_READ_FAQ : bluespheres.tooltip.show)
	}
	
	// Ignore if popup menu active
	if (bluespheres.popup.show)
		return
	
	// Button selection
	if (control.pad1.pressed & (CONTROL_UP | CONTROL_DOWN))
	{
		playSound(0x5b)
		bluespheres.medals.medalselected = 0x01
		
		if (control.pad1.pressed & CONTROL_UP)
		{
			if (bluespheres.medals.buttonselected != 0x00)
				--bluespheres.medals.buttonselected
			else
				bluespheres.medals.buttonselected = bluespheres.buttons.setup
		}
		else if (control.pad1.pressed & CONTROL_DOWN)
		{
			if (bluespheres.medals.buttonselected < bluespheres.buttons.setup)
				++bluespheres.medals.buttonselected
			else
				bluespheres.medals.buttonselected = 0x00
		}
		
		if (bluespheres.medals.buttonselected == 0x00)
			bluespheres.medals.medals.setup = 0x0f
	}
	
	// Button selection with scrolling
	if (!(bluespheres.medals.buttonselected >= bluespheres.buttons.setup) && (control.pad1.state & (CONTROL_LEFT | CONTROL_RIGHT)))
	{
		++bluespheres.buttons.scrollTimer
		if (bluespheres.buttons.scrollTimer >= 25)
		{
			if (bluespheres.buttons.scrollTimer >= 30)
			{
				playSound(0x5b)
				if (control.pad1.state & CONTROL_LEFT)
				{
					if (bluespheres.medals.medalselected != 0x01)
						--bluespheres.medals.medalselected
					else
						bluespheres.medals.medalselected = bluespheres.medals.medals.setup
				}
				else if (control.pad1.state & CONTROL_RIGHT)
				{
					if (bluespheres.medals.medalselected < bluespheres.medals.medals.setup)
						++bluespheres.medals.medalselected
					else
						bluespheres.medals.medalselected = 0x01
				}
				
				bluespheres.buttons.scrollTimer = 25
			}
		}
	}
	else
	{
		bluespheres.buttons.scrollTimer = 0x00
	}
	
	// Button selection
	if (!(bluespheres.medals.buttonselected >= bluespheres.buttons.setup) && (control.pad1.pressed & (CONTROL_LEFT | CONTROL_RIGHT)))
	{
		playSound(0x5b)
		if (control.pad1.pressed & CONTROL_LEFT)
		{
			if (bluespheres.medals.medalselected != 0x01)
				--bluespheres.medals.medalselected
			else
				bluespheres.medals.medalselected = bluespheres.medals.medals.setup
		}
		else if (control.pad1.pressed & CONTROL_RIGHT)
		{
			if (bluespheres.medals.medalselected < bluespheres.medals.medals.setup)
				++bluespheres.medals.medalselected
			else
				bluespheres.medals.medalselected = 0x01
		}
	}
	
	// Perform the action of selected button when start pressed
	if (control.pad1.pressed & CONTROL_START)
	{
		if (bluespheres.medals.buttonselected == bluespheres.buttons.setup)
		{
			playSound(0x63)
			global.game_mode = 0x88
		}
		
		for (u8 A = 0x01; A <= bluespheres.medals.medals.setup; ++A)
		{
			if (bluespheres.medals.medalselected == A && (bluespheres.medals.buttonselected < bluespheres.buttons.setup))
			{
				if (BlueSpheresTimer.Medals.isUnlocked(bluespheres.medals.buttonselected, A))
				{
					playSound(0x63)
					bluespheres.popup.show = 0x01
					waitForNextFrame()
				}
				else
				{
					playSound(0x7b)
					
					// Reset the tooltip if it was in the process
					bluespheres.tooltip.show = ""
					bluespheres.tooltip.state = 0x00
					bluespheres.tooltip.frames = 0x00
					bluespheres.tooltip.timeout = 0x00
					
					// Show new tooltip
					bluespheres.tooltip.show = STRING_TOOLTIP_MEDAL_NOT_RECEIVED
				}
			}
		}
	}
	
	// Go back to the achievements menu
	if (control.pad1.pressed & CONTROL_B)
	{
		playSound(0xad)
		global.game_mode = 0x88
	}
}

function void BlueSpheresTimer.Menu.medals.popups()
{
	if !(bluespheres.popup.show)
		return
		
	if (control.pad1.pressed & CONTROL_START)
	{
		playSound(0x63)
		bluespheres.popup.show = 0x00
	}
	
	s32 target
	if (bluespheres.medals.buttonselected == 0x00)
	{
		if (bluespheres.medals.medalselected >= 0x01 && bluespheres.medals.medalselected <= 0x07)
		{
			if (bluespheres.medals.medalselected == 0x01)
				target = 0x05
			else if (bluespheres.medals.medalselected == 0x02)
				target = 10
			else if (bluespheres.medals.medalselected == 0x03)
				target = 15
			else if (bluespheres.medals.medalselected == 0x04)
				target = 20
			else if (bluespheres.medals.medalselected == 0x05)
				target = 25
			else if (bluespheres.medals.medalselected == 0x06)
				target = 30
			else if (bluespheres.medals.medalselected == 0x07)
				target = 35
			
			BlueSpheresTimer.Menu.popup.show(stringformat(STRING_MEDAL_ACHIEVEMENTS5.LINE1, target), "", "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x08)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_LONGPLAY.LINE1, "", "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x09)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_BLUE_SPHERE.LINE1, STRING_MEDAL_BLUE_SPHERE.LINE2, "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x0a)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_OH_SHINY.LINE1, STRING_MEDAL_OH_SHINY.LINE2, "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x0b)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_LIKE_JUMPING.LINE1, STRING_MEDAL_LIKE_JUMPING.LINE2, "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x0c)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_MY_POWER.LINE1, "", "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x0d)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_DAGE.LINE1, STRING_MEDAL_DAGE.LINE2, "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x0e)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_CHALLENGES.LINE1, STRING_MEDAL_CHALLENGES.LINE2, "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
		else if (bluespheres.medals.medalselected == 0x0f)
		{
			BlueSpheresTimer.Menu.popup.show(STRING_MEDAL_FEATURES.LINE1, STRING_MEDAL_FEATURES.LINE2, "", "", STRING_CLOSE)
			BlueSpheresTimer.Menu.medals.status()
		}
	}
}